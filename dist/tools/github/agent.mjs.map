{"version":3,"file":"agent.mjs","sources":["../../../src/agents/github/command.ts","../../../src/agents/github/build-agent.ts"],"sourcesContent":["import * as crypto from 'node:crypto'\nimport * as os from 'node:os'\nimport * as fs from 'node:fs'\n\nconst CMD_STRING = '::'\n\nexport type CommandProperties = Record<string, string | object>\n\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nexport function issueCommand(command: string, properties: CommandProperties, message: string): void {\n    const cmd = new Command(command, properties, message)\n    process.stdout.write(`${cmd.toString()}${os.EOL}`)\n}\n\nexport function issueFileCommand(command: string, message: string | object): void {\n    const filePath = process.env[`GITHUB_${command}`]\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`)\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`)\n    }\n\n    fs.appendFileSync(filePath, `${toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    })\n}\n\nexport enum ExitCode {\n    /**\n     * A code indicating that the action was successful\n     */\n    Success = 0,\n\n    /**\n     * A code indicating that the action was a failure\n     */\n    Failure = 1\n}\n\nclass Command {\n    private readonly command: string\n    private readonly message: string\n    private readonly properties: CommandProperties\n\n    constructor(command: string, properties: CommandProperties, message: string) {\n        if (!command) {\n            command = 'missing.command'\n        }\n\n        this.command = command\n        this.properties = properties\n        this.message = message\n    }\n\n    toString(): string {\n        let cmdStr = CMD_STRING + this.command\n\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' '\n            let first = true\n            for (const key in this.properties) {\n                if (Object.prototype.hasOwnProperty.call(this.properties, key)) {\n                    const val = this.properties[key]\n                    if (val) {\n                        if (first) {\n                            first = false\n                        } else {\n                            cmdStr += ','\n                        }\n\n                        cmdStr += `${key}=${escapeProperty(val)}`\n                    }\n                }\n            }\n        }\n\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`\n        return cmdStr\n    }\n}\n\nfunction escapeData(s: string | object): string {\n    return toCommandValue(s).replace(/%/g, '%25').replace(/\\r/g, '%0D').replace(/\\n/g, '%0A')\n}\n\nfunction escapeProperty(s: string | object): string {\n    return toCommandValue(s).replace(/%/g, '%25').replace(/\\r/g, '%0D').replace(/\\n/g, '%0A').replace(/:/g, '%3A').replace(/,/g, '%2C')\n}\n\nexport function toCommandValue(input: string | object): string {\n    if (input === null || input === undefined) {\n        return ''\n    } else if (typeof input === 'string' || input instanceof String) {\n        return input as string\n    }\n    return JSON.stringify(input)\n}\n\nexport function prepareKeyValueMessage(key: string, value: string | object): string {\n    const uuid = crypto.randomUUID()\n    const delimiter = `ghadelimiter_${uuid}`\n    const convertedValue = toCommandValue(value)\n\n    // These should realistically never happen, but just in case someone finds a\n    // way to exploit uuid generation let's not allow keys or values that contain\n    // the delimiter.\n    if (key.includes(delimiter)) {\n        throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`)\n    }\n\n    if (convertedValue.includes(delimiter)) {\n        throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`)\n    }\n\n    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`\n}\n","import * as os from 'node:os'\nimport process from 'node:process'\nimport { BuildAgentBase, type IBuildAgent } from '@agents/common'\nimport { ExitCode, issueCommand, issueFileCommand, prepareKeyValueMessage, toCommandValue } from './command'\n\nexport class BuildAgent extends BuildAgentBase implements IBuildAgent {\n    agentName = 'GitHub Actions'\n\n    sourceDirVariable = 'GITHUB_WORKSPACE'\n    tempDirVariable = 'RUNNER_TEMP'\n    cacheDirVariable = 'RUNNER_TOOL_CACHE'\n\n    addPath(inputPath: string): void {\n        super.addPath(inputPath)\n        const filePath = process.env['GITHUB_PATH'] || ''\n        if (filePath) {\n            issueFileCommand('PATH', inputPath)\n        } else {\n            issueCommand('add-path', {}, inputPath)\n        }\n    }\n\n    debug = (message: string): void => issueCommand('debug', {}, message)\n\n    info = (message: string): void => {\n        process.stdout.write(`${message}${os.EOL}`)\n    }\n\n    warn = (message: string): void => issueCommand('warning', {}, message)\n\n    error = (message: string): void => issueCommand('error', {}, message)\n\n    setSucceeded(_message: string, _done?: boolean): void {\n        process.exitCode = ExitCode.Success\n    }\n\n    setFailed = (message: string, _done?: boolean): void => {\n        process.exitCode = ExitCode.Failure\n        this.error(message)\n    }\n\n    setOutput = (name: string, value: string): void => {\n        const filePath = process.env['GITHUB_OUTPUT'] || ''\n        if (filePath) {\n            return issueFileCommand('OUTPUT', prepareKeyValueMessage(name, value))\n        }\n\n        process.stdout.write(os.EOL)\n        issueCommand('set-output', { name }, toCommandValue(value))\n    }\n\n    setVariable = (name: string, value: string): void => {\n        const convertedVal = toCommandValue(value)\n        process.env[name] = convertedVal\n\n        const filePath = process.env['GITHUB_ENV'] || ''\n        if (filePath) {\n            return issueFileCommand('ENV', prepareKeyValueMessage(name, value))\n        }\n\n        issueCommand('set-env', { name }, convertedVal)\n    }\n\n    updateBuildNumber = (version: string): void => this.debug(`updateBuildNumber - ${version}`)\n}\n"],"names":["ExitCode","process"],"mappings":"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"}
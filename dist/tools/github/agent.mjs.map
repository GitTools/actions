{"version":3,"file":"agent.mjs","sources":["../../../src/agents/github/command.ts","../../../src/agents/github/build-agent.ts"],"sourcesContent":["import * as crypto from 'node:crypto'\nimport * as os from 'node:os'\nimport * as fs from 'node:fs'\n\nconst CMD_STRING = '::'\n\nexport type CommandProperties = Record<string, string | object>\n\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nexport function issueCommand(command: string, properties: CommandProperties, message: string): void {\n    const cmd = new Command(command, properties, message)\n    process.stdout.write(`${cmd.toString()}${os.EOL}`)\n}\n\nexport function issueFileCommand(command: string, message: string | object): void {\n    const filePath = process.env[`GITHUB_${command}`]\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`)\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`)\n    }\n\n    fs.appendFileSync(filePath, `${toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    })\n}\n\nexport enum ExitCode {\n    /**\n     * A code indicating that the action was successful\n     */\n    Success = 0,\n\n    /**\n     * A code indicating that the action was a failure\n     */\n    Failure = 1\n}\n\nclass Command {\n    private readonly command: string\n    private readonly message: string\n    private readonly properties: CommandProperties\n\n    constructor(command: string, properties: CommandProperties, message: string) {\n        if (!command) {\n            command = 'missing.command'\n        }\n\n        this.command = command\n        this.properties = properties\n        this.message = message\n    }\n\n    toString(): string {\n        let cmdStr = CMD_STRING + this.command\n\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' '\n            let first = true\n            for (const key in this.properties) {\n                if (Object.prototype.hasOwnProperty.call(this.properties, key)) {\n                    const val = this.properties[key]\n                    if (val) {\n                        if (first) {\n                            first = false\n                        } else {\n                            cmdStr += ','\n                        }\n\n                        cmdStr += `${key}=${escapeProperty(val)}`\n                    }\n                }\n            }\n        }\n\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`\n        return cmdStr\n    }\n}\n\nfunction escapeData(s: string | object): string {\n    return toCommandValue(s).replace(/%/g, '%25').replace(/\\r/g, '%0D').replace(/\\n/g, '%0A')\n}\n\nfunction escapeProperty(s: string | object): string {\n    return toCommandValue(s).replace(/%/g, '%25').replace(/\\r/g, '%0D').replace(/\\n/g, '%0A').replace(/:/g, '%3A').replace(/,/g, '%2C')\n}\n\nexport function toCommandValue(input: string | object): string {\n    if (input === null || input === undefined) {\n        return ''\n    } else if (typeof input === 'string' || input instanceof String) {\n        return input as string\n    }\n    return JSON.stringify(input)\n}\n\nexport function prepareKeyValueMessage(key: string, value: string | object): string {\n    const uuid = crypto.randomUUID()\n    const delimiter = `ghadelimiter_${uuid}`\n    const convertedValue = toCommandValue(value)\n\n    // These should realistically never happen, but just in case someone finds a\n    // way to exploit uuid generation let's not allow keys or values that contain\n    // the delimiter.\n    if (key.includes(delimiter)) {\n        throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`)\n    }\n\n    if (convertedValue.includes(delimiter)) {\n        throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`)\n    }\n\n    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`\n}\n","import * as os from 'node:os'\nimport process from 'node:process'\nimport { BuildAgentBase, type IBuildAgent } from '@agents/common'\nimport { ExitCode, issueCommand, issueFileCommand, prepareKeyValueMessage, toCommandValue } from './command'\n\nexport class BuildAgent extends BuildAgentBase implements IBuildAgent {\n    agentName = 'GitHub Actions'\n\n    sourceDirVariable = 'GITHUB_WORKSPACE'\n    tempDirVariable = 'RUNNER_TEMP'\n    cacheDirVariable = 'RUNNER_TOOL_CACHE'\n\n    addPath(inputPath: string): void {\n        super.addPath(inputPath)\n        const filePath = process.env['GITHUB_PATH'] || ''\n        if (filePath) {\n            issueFileCommand('PATH', inputPath)\n        } else {\n            issueCommand('add-path', {}, inputPath)\n        }\n    }\n\n    debug = (message: string): void => issueCommand('debug', {}, message)\n\n    info = (message: string): void => {\n        process.stdout.write(`${message}${os.EOL}`)\n    }\n\n    warn = (message: string): void => issueCommand('warning', {}, message)\n\n    error = (message: string): void => issueCommand('error', {}, message)\n\n    setSucceeded(_message: string, _done?: boolean): void {\n        process.exitCode = ExitCode.Success\n    }\n\n    setFailed = (message: string, _done?: boolean): void => {\n        process.exitCode = ExitCode.Failure\n        this.error(message)\n    }\n\n    setOutput = (name: string, value: string): void => {\n        const filePath = process.env['GITHUB_OUTPUT'] || ''\n        if (filePath) {\n            return issueFileCommand('OUTPUT', prepareKeyValueMessage(name, value))\n        }\n\n        process.stdout.write(os.EOL)\n        issueCommand('set-output', { name }, toCommandValue(value))\n    }\n\n    setVariable = (name: string, value: string): void => {\n        const convertedVal = toCommandValue(value)\n        process.env[name] = convertedVal\n\n        const filePath = process.env['GITHUB_ENV'] || ''\n        if (filePath) {\n            return issueFileCommand('ENV', prepareKeyValueMessage(name, value))\n        }\n\n        issueCommand('set-env', { name }, convertedVal)\n    }\n\n    updateBuildNumber = (version: string): void => this.debug(`updateBuildNumber - ${version}`)\n}\n"],"names":["ExitCode","process"],"mappings":"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"}
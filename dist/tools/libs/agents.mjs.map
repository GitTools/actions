{"version":3,"file":"agents.mjs","sources":["../../../src/agents/common/lookPath.ts","../../../src/agents/common/build-agent.ts"],"sourcesContent":["import * as fs from 'node:fs/promises'\nimport * as path from 'node:path'\nimport * as process from 'node:process'\n\n/**\n * Sometimes, people want to look for local executable files\n * which are specified with either relative or absolute file path.\n * @private\n * @param cmd\n * @return {string} An absolute path of given command, or undefined.\n */\nconst isFilePath = (cmd: string): string | undefined => {\n    return cmd.includes(path.sep) ? path.resolve(cmd) : undefined\n}\n\n/**\n * Just promisifies \"fs.access\"\n * @private\n * @param {string} filePath An absolute file path with an applicable extension appended.\n * @return {Promise<string>} Resolves absolute path or empty string.\n */\nconst access = async (filePath: string): Promise<string | undefined> => {\n    try {\n        await fs.access(filePath)\n        return filePath\n    } catch (_error) {\n        return undefined\n    }\n}\n\n/**\n * Resolves if the given file is executable or not, regarding \"PATHEXT\" to be applied.\n * @private\n * @param {string} absPath A file path to be checked.\n * @param {LookPathOption} options Options for lookPath.\n * @return {Promise<string>} Resolves the absolute file path just checked, or undefined.\n */\nconst isExecutable = async (absPath: string, options: LookPathOption = {}): Promise<string | undefined> => {\n    const envVars = options.env || process.env\n    const extension = (envVars.PATHEXT || '').split(path.delimiter).concat('')\n    const bins = await Promise.all(extension.map(async ext => access(absPath + ext.toLowerCase())))\n    return bins.find(bin => !!bin)\n}\n\n/**\n * Returns a list of directories on which the target command should be looked for.\n * @private\n * @param {string[]} options.include Will be added to \"PATH\" env.\n * @param {string[]} options.exclude Will be filtered from \"PATH\" env.\n * @return {string[]} Directories to dig into.\n */\nconst getDirsToWalkThrough = (options: LookPathOption): string[] => {\n    const envVars = options.env || process.env\n    const envName = process.platform === 'win32' ? 'Path' : 'PATH'\n    const envPath = envVars[envName] || ''\n    return envPath\n        .split(path.delimiter)\n        .concat(options.include || [])\n        .filter(p => !(options.exclude || []).includes(p))\n}\n\n/**\n * Returns async promise with absolute file path of given command,\n * and resolves with undefined if the command not found.\n * @param {string} command Command name to look for.\n * @param {LookPathOption} opt Options for lookPath.\n * @return {Promise<string|undefined>} Resolves absolute file path, or undefined if not found.\n */\nexport async function lookPath(command: string, opt: LookPathOption = {}): Promise<string | undefined> {\n    const directPath = isFilePath(command)\n    if (directPath) return isExecutable(directPath, opt)\n\n    const dirs = getDirsToWalkThrough(opt)\n    const bins = await Promise.all(dirs.map(async dir => isExecutable(path.join(dir, command), opt)))\n    return bins.find(bin => !!bin)\n}\n\n/**\n * Options for lookPath.\n */\nexport interface LookPathOption {\n    /**\n     * Additional paths to look for, would be dealt same as PATH env.\n     * Example: ['/tmp/bin', 'usr/local/bin']\n     */\n    include?: string[]\n    /**\n     * Paths to exclude to look for.\n     * Example: ['/mnt']\n     */\n    exclude?: string[]\n    /**\n     * Set of env var to be used ON BEHALF OF the existing env of your runtime.\n     * If `include` or `exclude` are given, they will be applied to this env set.\n     */\n    env?: NodeJS.ProcessEnv\n}\n","import { exec as execNonPromise, ExecOptions } from 'node:child_process'\nimport * as fs from 'node:fs/promises'\nimport * as process from 'node:process'\nimport * as path from 'node:path'\nimport * as util from 'node:util'\nimport * as semver from 'semver'\nimport { lookPath } from './lookPath'\nimport { type ExecResult } from './models'\n\nexport interface IBuildAgent {\n    agentName: string\n    sourceDirVariable: string\n    tempDirVariable: string\n    cacheDirVariable: string\n\n    sourceDir: string\n    tempDir: string\n    cacheDir: string\n\n    addPath(inputPath: string): void\n\n    debug(message: string): void\n\n    info(message: string): void\n\n    warn(message: string): void\n\n    error(message: string): void\n\n    exec(exec: string, args: string[]): Promise<ExecResult>\n\n    cacheToolDirectory(sourceDir: string, tool: string, version: string): Promise<string>\n\n    directoryExists(dir: string): Promise<boolean>\n\n    removeDirectory(dir: string): Promise<void>\n\n    fileExists(file: string): Promise<boolean>\n\n    findLocalTool(toolName: string, versionSpec: string): Promise<string | null>\n\n    getInput(input: string, required?: boolean): string\n\n    getInput<T>(input: Extract<keyof T, string>, required?: boolean): string\n\n    getBooleanInput<T>(input: Extract<keyof T, string>, required?: boolean): boolean\n\n    getDelimitedInput<T>(input: Extract<keyof T, string>, delimiter: string, required?: boolean): string[]\n\n    getListInput<T>(input: Extract<keyof T, string>, required?: boolean): string[]\n\n    setSucceeded(message: string, done?: boolean): void\n\n    setFailed(message: string, done?: boolean): void\n\n    setOutput(name: string, value: string): void\n\n    getVariable(name: string): string | undefined\n\n    getVariableAsPath(name: string): string\n\n    setVariable(name: string, value: string): void\n\n    updateBuildNumber: (version: string) => void\n\n    which(tool: string, check?: boolean): Promise<string>\n}\n\nexport abstract class BuildAgentBase implements IBuildAgent {\n    abstract agentName: string\n    abstract sourceDirVariable: string\n    abstract tempDirVariable: string\n    abstract cacheDirVariable: string\n\n    abstract debug(message: string): void\n\n    abstract info(message: string): void\n\n    abstract warn(message: string): void\n\n    abstract error(message: string): void\n\n    abstract setSucceeded(message: string, done?: boolean): void\n\n    abstract setFailed(message: string, done?: boolean): void\n\n    abstract setOutput(name: string, value: string): void\n\n    abstract setVariable(name: string, value: string): void\n\n    abstract updateBuildNumber: (version: string) => void\n\n    get sourceDir(): string {\n        return this.getVariableAsPath(this.sourceDirVariable)?.replace(/\\\\/g, '/')\n    }\n\n    get tempDir(): string {\n        return this.getVariableAsPath(this.tempDirVariable)\n    }\n\n    get cacheDir(): string {\n        return this.getVariableAsPath(this.cacheDirVariable)\n    }\n\n    addPath(inputPath: string): void {\n        const envName = process.platform === 'win32' ? 'Path' : 'PATH'\n        const newPath = inputPath + path.delimiter + process.env[envName]\n        this.debug(`new Path: ${newPath}`)\n        process.env[envName] = newPath\n        process.env.Path = newPath\n        this.info(`Updated PATH: ${process.env[envName]}`)\n    }\n\n    getInput<T>(input: Extract<keyof T, string>, required?: boolean): string {\n        const inputProp = input.replace(/ /g, '_').toUpperCase()\n        const val = this.getVariable(`INPUT_${inputProp}`)\n        if (required && !val) {\n            throw new Error(`Input required and not supplied: ${inputProp}`)\n        }\n        return val.trim()\n    }\n\n    getBooleanInput<T>(input: Extract<keyof T, string>, required?: boolean): boolean {\n        const inputValue = this.getInput(input, required)\n        return (inputValue || 'false').toLowerCase() === 'true'\n    }\n\n    getDelimitedInput<T>(input: Extract<keyof T, string>, delimiter: string, required?: boolean): string[] {\n        return this.getInput(input, required)\n            .split(delimiter)\n            .filter(x => {\n                if (x) {\n                    return x.trim()\n                }\n            })\n    }\n\n    getListInput<T>(input: Extract<keyof T, string>, required?: boolean): string[] {\n        return this.getDelimitedInput(input, '\\n', required)\n    }\n\n    getVariable(name: string): string {\n        const value = (process.env[name] || '').trim()\n        this.debug(`getVariable - ${name}: ${value}`)\n        return value.trim()\n    }\n\n    getVariableAsPath(name: string): string {\n        return path.resolve(path.normalize(this.getVariable(name)))\n    }\n\n    async directoryExists(dir: string): Promise<boolean> {\n        try {\n            await fs.access(dir)\n            return (await fs.stat(dir)).isDirectory()\n        } catch (_error) {\n            return false\n        }\n    }\n\n    async removeDirectory(dir: string): Promise<void> {\n        await fs.rm(dir, { recursive: true, force: true, maxRetries: 3, retryDelay: 1000 })\n    }\n\n    async fileExists(file: string): Promise<boolean> {\n        try {\n            await fs.access(file)\n            return (await fs.stat(file)).isFile()\n        } catch (_error) {\n            return false\n        }\n    }\n\n    async cacheToolDirectory(sourceDir: string, tool: string, version: string): Promise<string> {\n        if (!tool) {\n            throw new Error('tool is a required parameter')\n        }\n        if (!version) {\n            throw new Error('version is a required parameter')\n        }\n        if (!sourceDir) {\n            throw new Error('sourceDir is a required parameter')\n        }\n\n        const cacheRoot = this.cacheDir\n        if (!cacheRoot) {\n            this.debug('cache root not set')\n            return ''\n        }\n\n        version = semver.clean(version) || version\n        const destPath = path.join(cacheRoot, tool, version)\n        if (await this.directoryExists(destPath)) {\n            this.debug(`Destination directory ${destPath} already exists, removing`)\n            await this.removeDirectory(destPath)\n        }\n\n        this.debug(`Copying ${sourceDir} to ${destPath}`)\n        await fs.mkdir(destPath, { recursive: true })\n        await fs.cp(sourceDir, destPath, { recursive: true, force: true })\n\n        this.debug(`Caching ${tool}@${version} from ${sourceDir}`)\n        return destPath\n    }\n\n    async findLocalTool(toolName: string, versionSpec: string): Promise<string | null> {\n        if (!toolName) {\n            throw new Error('toolName is a required parameter')\n        }\n        if (!versionSpec) {\n            throw new Error('versionSpec is a required parameter')\n        }\n\n        const cacheRoot = this.cacheDir\n        if (!cacheRoot) {\n            this.debug('cache root not set')\n            return null\n        }\n\n        versionSpec = semver.clean(versionSpec) || versionSpec\n        this.info(`Looking for local tool ${toolName}@${versionSpec}`)\n        const toolPath = path.join(cacheRoot, toolName, versionSpec)\n        if (!(await this.directoryExists(toolPath))) {\n            this.info(`Directory ${toolPath} not found`)\n            return null\n        } else {\n            this.info(`Found tool ${toolName}@${versionSpec} at ${toolPath}`)\n        }\n\n        return toolPath\n    }\n\n    async exec(cmd: string, args: string[]): Promise<ExecResult> {\n        const exec = util.promisify(execNonPromise)\n\n        try {\n            const commandOptions: ExecOptions = { maxBuffer: 1024 * 1024 * 10 } // 10MB\n            const { stdout, stderr } = await exec(`${cmd} ${args.join(' ')}`, commandOptions)\n            return {\n                code: 0,\n                error: null,\n                stderr,\n                stdout\n            }\n        } catch (e) {\n            const error = e as Error & { code: number; stderr: string; stdout: string }\n            return {\n                code: error.code,\n                error,\n                stderr: error.stderr,\n                stdout: error.stdout\n            }\n        }\n    }\n\n    async which(tool: string, _check?: boolean): Promise<string> {\n        this.debug(`looking for tool '${tool}' in PATH`)\n        let toolPath = await lookPath(tool)\n        if (toolPath) {\n            toolPath = path.resolve(toolPath)\n            this.debug(`found tool '${tool}' in PATH: ${toolPath}`)\n            return toolPath\n        }\n        throw new Error(`Unable to locate executable file: ${tool}`)\n    }\n}\n"],"names":["semver.clean","exec","execNonPromise"],"mappings":"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"}
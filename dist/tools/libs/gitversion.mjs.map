{"version":3,"file":"gitversion.mjs","sources":["../../../src/tools/gitversion/settings.ts","../../../src/tools/gitversion/tool.ts","../../../src/tools/gitversion/runner.ts"],"sourcesContent":["import { type ISettingsProvider, SettingsProvider } from '@tools/common'\nimport { type CommandSettings, type ExecuteSettings } from './models'\n\nexport interface IGitVersionSettingsProvider extends ISettingsProvider {\n    getExecuteSettings(): ExecuteSettings\n\n    getCommandSettings(): CommandSettings\n}\n\nexport class GitVersionSettingsProvider extends SettingsProvider implements IGitVersionSettingsProvider {\n    getExecuteSettings(): ExecuteSettings {\n        const targetPath = this.buildAgent.getInput<ExecuteSettings>('targetPath')\n\n        const disableCache = this.buildAgent.getBooleanInput<ExecuteSettings>('disableCache')\n        const disableNormalization = this.buildAgent.getBooleanInput<ExecuteSettings>('disableNormalization')\n        const disableShallowCloneCheck = this.buildAgent.getBooleanInput<ExecuteSettings>('disableShallowCloneCheck')\n\n        const configFilePath = this.buildAgent.getInput<ExecuteSettings>('configFilePath')\n        const overrideConfig = this.buildAgent.getListInput<ExecuteSettings>('overrideConfig')\n\n        const updateAssemblyInfo = this.buildAgent.getBooleanInput<ExecuteSettings>('updateAssemblyInfo')\n        const updateAssemblyInfoFilename = this.buildAgent.getInput<ExecuteSettings>('updateAssemblyInfoFilename')\n\n        const updateProjectFiles = this.buildAgent.getBooleanInput<ExecuteSettings>('updateProjectFiles')\n\n        const buildNumberFormat = this.buildAgent.getInput<ExecuteSettings>('buildNumberFormat')\n\n        return {\n            targetPath,\n            disableCache,\n            disableNormalization,\n            disableShallowCloneCheck,\n            configFilePath,\n            overrideConfig,\n            updateAssemblyInfo,\n            updateAssemblyInfoFilename,\n            updateProjectFiles,\n            buildNumberFormat\n        }\n    }\n\n    getCommandSettings(): CommandSettings {\n        const targetPath = this.buildAgent.getInput<CommandSettings>('targetPath')\n        const disableShallowCloneCheck = this.buildAgent.getBooleanInput<CommandSettings>('disableShallowCloneCheck')\n        const args = this.buildAgent.getInput<CommandSettings>('arguments')\n\n        return {\n            targetPath,\n            disableShallowCloneCheck,\n            arguments: args\n        }\n    }\n}\n","import { type ExecResult } from '@agents/common'\nimport { ArgumentsBuilder, DotnetTool, keysOf } from '@tools/common'\nimport { type CommandSettings, type ExecuteSettings, type GitVersionOutput } from './models'\nimport { GitVersionSettingsProvider, type IGitVersionSettingsProvider } from './settings'\n\nexport class GitVersionTool extends DotnetTool {\n    get packageName(): string {\n        return 'GitVersion.Tool'\n    }\n\n    get toolName(): string {\n        return 'dotnet-gitversion'\n    }\n\n    get toolPathVariable(): string {\n        return 'GITVERSION_PATH'\n    }\n\n    get versionRange(): string | null {\n        return '>=6.1.0 <7.0.0'\n    }\n\n    get settingsProvider(): IGitVersionSettingsProvider {\n        return new GitVersionSettingsProvider(this.buildAgent)\n    }\n\n    async executeJson(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getExecuteSettings()\n        const workDir = await this.getRepoDir(settings)\n\n        await this.checkShallowClone(settings, workDir)\n\n        const args = await this.getExecuteArguments(workDir, settings)\n\n        await this.setDotnetRoot()\n        return await this.executeTool(args)\n    }\n\n    async executeCommand(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getCommandSettings()\n        const workDir = await this.getRepoDir(settings)\n\n        await this.checkShallowClone(settings, workDir)\n\n        const args = this.getCommandArguments(workDir, settings)\n\n        await this.setDotnetRoot()\n        return await this.executeTool(args)\n    }\n\n    writeGitVersionToAgent(output: GitVersionOutput): void {\n        const settings = this.settingsProvider.getExecuteSettings()\n        for (const property of keysOf(output)) {\n            const name = this.toCamelCase(property)\n            try {\n                let value = output[property]?.toString()\n                if (value === '0') {\n                    value = '0'\n                }\n                this.buildAgent.setOutput(name, value)\n                this.buildAgent.setOutput(`GitVersion_${property}`, value)\n                this.buildAgent.setVariable(name, value)\n                this.buildAgent.setVariable(`GitVersion_${property}`, value)\n            } catch (_error) {\n                this.buildAgent.error(`Unable to set output/variable for ${property}`)\n            }\n        }\n\n        if (settings.buildNumberFormat) {\n            const buildNumber = this.buildAgent.getExpandedString(settings.buildNumberFormat)\n            this.buildAgent.updateBuildNumber(buildNumber)\n        }\n    }\n\n    protected async getRepoDir(settings: ExecuteSettings | CommandSettings): Promise<string> {\n        return await super.getRepoPath(settings.targetPath)\n    }\n\n    protected async getExecuteArguments(workDir: string, options: ExecuteSettings): Promise<string[]> {\n        const builder = new ArgumentsBuilder().addArgument(workDir).addArgument('/output').addArgument('json').addArgument('/l').addArgument('console')\n\n        const {\n            disableCache,\n            disableNormalization,\n            configFilePath,\n            overrideConfig,\n            updateAssemblyInfo,\n            updateAssemblyInfoFilename,\n            updateProjectFiles\n            //\n        } = options\n\n        if (disableCache) {\n            builder.addArgument('/nocache')\n        }\n\n        if (disableNormalization) {\n            builder.addArgument('/nonormalize')\n        }\n\n        if (configFilePath) {\n            if (await this.isValidInputFile('configFilePath', configFilePath)) {\n                builder.addArgument('/config').addArgument(configFilePath)\n            } else {\n                throw new Error(`GitVersion configuration file not found at ${configFilePath}`)\n            }\n        }\n\n        if (overrideConfig) {\n            for (let config of overrideConfig) {\n                config = config.trim()\n                if (config.match(/([a-zA-Z0-9]+(-[a-zA-Z]+)*=[a-zA-Z0-9\\- :.']*)/)) {\n                    builder.addArgument('/overrideconfig').addArgument(config)\n                }\n            }\n        }\n\n        if (updateAssemblyInfo) {\n            builder.addArgument('/updateassemblyinfo')\n\n            // You can specify 'updateAssemblyInfo' without 'updateAssemblyInfoFilename'.\n            if (updateAssemblyInfoFilename?.length > 0) {\n                if (await this.isValidInputFile('updateAssemblyInfoFilename', updateAssemblyInfoFilename)) {\n                    builder.addArgument(updateAssemblyInfoFilename)\n                } else {\n                    throw new Error(`AssemblyInfoFilename file not found at ${updateAssemblyInfoFilename}`)\n                }\n            }\n        }\n\n        if (updateProjectFiles) {\n            builder.addArgument('/updateprojectfiles')\n        }\n\n        return builder.build()\n    }\n\n    protected getCommandArguments(workDir: string, options: CommandSettings): string[] {\n        const builder = new ArgumentsBuilder().addArgument(workDir)\n\n        if (options.arguments) {\n            builder.addArguments(ArgumentsBuilder.parseArgumentString(options.arguments))\n        }\n\n        return builder.build()\n    }\n\n    private async checkShallowClone(settings: ExecuteSettings | CommandSettings, workDir: string): Promise<void> {\n        if (!settings.disableShallowCloneCheck) {\n            const isShallowResult = await this.execute('git', ['-C', workDir, 'rev-parse', '--is-shallow-repository'])\n            if (isShallowResult.code === 0 && isShallowResult.stdout?.trim() === 'true') {\n                throw new Error(\n                    'The repository is shallow. Consider disabling shallow clones. See https://github.com/GitTools/actions/blob/main/docs/cloning.md for more information.'\n                )\n            }\n        }\n    }\n\n    private toCamelCase(input: string): string {\n        return input.replace(/^\\w|[A-Z]|\\b\\w|\\s+/g, function (match, index) {\n            if (+match === 0) return '' // or if (/\\s+/.test(match)) for white spaces\n            return index === 0 ? match.toLowerCase() : match.toUpperCase()\n        })\n    }\n}\n","import { type ExecResult, type IBuildAgent } from '@agents/common'\nimport { type Commands, type GitVersionOutput } from './models'\nimport { GitVersionTool } from './tool'\nimport { RunnerBase } from '../common/runner'\n\nexport class Runner extends RunnerBase {\n    protected readonly tool: GitVersionTool\n\n    constructor(protected readonly buildAgent: IBuildAgent) {\n        super(buildAgent)\n        this.tool = new GitVersionTool(this.buildAgent)\n    }\n\n    async run(command: Commands): Promise<ExecResult> {\n        switch (command) {\n            case 'setup':\n                return await this.setup()\n            case 'execute':\n                return await this.execute()\n            case 'command':\n                return await this.command()\n        }\n    }\n\n    private async setup(): Promise<ExecResult> {\n        return this.safeExecute(async () => {\n            await this.tool.install()\n            return { code: 0 }\n        }, 'GitVersion setup successfully')\n    }\n\n    private async execute(): Promise<ExecResult> {\n        return this.safeExecute(async () => {\n            const result = await this.tool.executeJson()\n            this.buildAgent.debug('Parsing GitVersion output')\n            return this.processGitVersionOutput(result)\n        }, 'GitVersion executed successfully')\n    }\n\n    private async command(): Promise<ExecResult> {\n        return this.safeExecute(async () => await this.tool.executeCommand(), 'GitVersion executed successfully')\n    }\n\n    private processGitVersionOutput(result: ExecResult): ExecResult {\n        const stdout = result.stdout as string\n        if (stdout.lastIndexOf('{') === -1 || stdout.lastIndexOf('}') === -1) {\n            const errorMessage = 'GitVersion output is not valid JSON, see output details'\n            this.buildAgent.debug(errorMessage)\n            this.buildAgent.setFailed(errorMessage, true)\n            return {\n                code: -1,\n                error: new Error(errorMessage)\n            }\n        } else {\n            const jsonOutput = stdout.substring(stdout.lastIndexOf('{'), stdout.lastIndexOf('}') + 1)\n\n            const gitVersionOutput = JSON.parse(jsonOutput) as GitVersionOutput\n            this.tool.writeGitVersionToAgent(gitVersionOutput)\n            this.buildAgent.setSucceeded('GitVersion executed successfully', true)\n            return result\n        }\n    }\n}\n"],"names":[],"mappings":"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"}
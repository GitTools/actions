{"version":3,"file":"gitversion.mjs","sources":["../../../src/tools/gitversion/settings.ts","../../../src/tools/gitversion/tool.ts","../../../src/tools/gitversion/runner.ts"],"sourcesContent":["import { type ISettingsProvider, SettingsProvider } from '@tools/common'\nimport { type CommandSettings, type ExecuteSettings } from './models'\n\nexport interface IGitVersionSettingsProvider extends ISettingsProvider {\n    getExecuteSettings(): ExecuteSettings\n\n    getCommandSettings(): CommandSettings\n}\n\nexport class GitVersionSettingsProvider extends SettingsProvider implements IGitVersionSettingsProvider {\n    getExecuteSettings(): ExecuteSettings {\n        const targetPath = this.buildAgent.getInput<ExecuteSettings>('targetPath')\n\n        const disableCache = this.buildAgent.getBooleanInput<ExecuteSettings>('disableCache')\n        const disableNormalization = this.buildAgent.getBooleanInput<ExecuteSettings>('disableNormalization')\n        const disableShallowCloneCheck = this.buildAgent.getBooleanInput<ExecuteSettings>('disableShallowCloneCheck')\n\n        const configFilePath = this.buildAgent.getInput<ExecuteSettings>('configFilePath', false)\n        const overrideConfig = this.buildAgent.getListInput<ExecuteSettings>('overrideConfig', false)\n\n        const updateAssemblyInfo = this.buildAgent.getBooleanInput<ExecuteSettings>('updateAssemblyInfo')\n        const updateAssemblyInfoFilename = this.buildAgent.getInput<ExecuteSettings>('updateAssemblyInfoFilename')\n\n        const updateProjectFiles = this.buildAgent.getBooleanInput<ExecuteSettings>('updateProjectFiles')\n\n        const buildNumberFormat = this.buildAgent.getInput<ExecuteSettings>('buildNumberFormat', false)\n\n        return {\n            targetPath,\n            disableCache,\n            disableNormalization,\n            disableShallowCloneCheck,\n            configFilePath,\n            overrideConfig,\n            updateAssemblyInfo,\n            updateAssemblyInfoFilename,\n            updateProjectFiles,\n            buildNumberFormat\n        }\n    }\n\n    getCommandSettings(): CommandSettings {\n        const targetPath = this.buildAgent.getInput<CommandSettings>('targetPath')\n        const disableNormalization = this.buildAgent.getBooleanInput<CommandSettings>('disableNormalization')\n        const disableShallowCloneCheck = this.buildAgent.getBooleanInput<CommandSettings>('disableShallowCloneCheck')\n        const args = this.buildAgent.getInput<CommandSettings>('arguments')\n\n        return {\n            targetPath,\n            disableNormalization,\n            disableShallowCloneCheck,\n            arguments: args\n        }\n    }\n}\n","import { type ExecResult } from '@agents/common'\nimport { ArgumentsBuilder, DotnetTool, keysOf } from '@tools/common'\nimport { type CommandSettings, type ExecuteSettings, type GitVersionOutput } from './models'\nimport { GitVersionSettingsProvider, type IGitVersionSettingsProvider } from './settings'\n\nexport class GitVersionTool extends DotnetTool {\n    get packageName(): string {\n        return 'GitVersion.Tool'\n    }\n\n    get toolName(): string {\n        return 'dotnet-gitversion'\n    }\n\n    get toolPathVariable(): string {\n        return 'GITVERSION_PATH'\n    }\n\n    get versionRange(): string | null {\n        return '>=6.1.0 <7.0.0'\n    }\n\n    get settingsProvider(): IGitVersionSettingsProvider {\n        return new GitVersionSettingsProvider(this.buildAgent)\n    }\n\n    async executeJson(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getExecuteSettings()\n        const workDir = await this.getRepoDir(settings)\n\n        await this.checkShallowClone(settings, workDir)\n\n        const args = await this.getExecuteArguments(workDir, settings)\n\n        await this.setDotnetRoot()\n        return await this.executeTool(args)\n    }\n\n    async executeCommand(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getCommandSettings()\n        const workDir = await this.getRepoDir(settings)\n\n        await this.checkShallowClone(settings, workDir)\n\n        const args = this.getCommandArguments(workDir, settings)\n\n        await this.setDotnetRoot()\n        return await this.executeTool(args)\n    }\n\n    writeGitVersionToAgent(output: GitVersionOutput): void {\n        for (const property of keysOf(output)) {\n            const name = this.toCamelCase(property)\n            try {\n                let value = output[property]?.toString()\n                if (value === '0') {\n                    value = '0'\n                }\n                this.buildAgent.setOutput(name, value)\n                this.buildAgent.setOutput(`GitVersion_${property}`, value)\n                this.buildAgent.setVariable(name, value)\n                this.buildAgent.setVariable(`GitVersion_${property}`, value)\n            } catch (_error) {\n                this.buildAgent.error(`Unable to set output/variable for ${property}`)\n            }\n        }\n    }\n\n    updateBuildNumber(): void {\n        const settings = this.settingsProvider.getExecuteSettings()\n        if (settings.buildNumberFormat) {\n            const buildNumber = this.buildAgent.getExpandedString(settings.buildNumberFormat)\n            this.buildAgent.updateBuildNumber(buildNumber)\n        } else {\n            this.buildAgent.debug('No buildNumberFormat provided. Skipping build number update.')\n        }\n    }\n\n    protected async getRepoDir(settings: ExecuteSettings | CommandSettings): Promise<string> {\n        return await super.getRepoPath(settings.targetPath)\n    }\n\n    protected async getExecuteArguments(workDir: string, options: ExecuteSettings): Promise<string[]> {\n        const builder = new ArgumentsBuilder().addArgument(workDir).addArgument('/output').addArgument('json').addArgument('/l').addArgument('console')\n\n        const {\n            disableCache,\n            disableNormalization,\n            configFilePath,\n            overrideConfig,\n            updateAssemblyInfo,\n            updateAssemblyInfoFilename,\n            updateProjectFiles\n            //\n        } = options\n\n        if (disableCache) {\n            builder.addArgument('/nocache')\n        }\n\n        if (disableNormalization) {\n            builder.addArgument('/nonormalize')\n        }\n\n        if (configFilePath) {\n            if (await this.isValidInputFile(workDir, configFilePath)) {\n                builder.addArgument('/config').addArgument(configFilePath)\n            } else {\n                throw new Error(`GitVersion configuration file not found at ${configFilePath}`)\n            }\n        }\n\n        if (overrideConfig) {\n            for (let config of overrideConfig) {\n                config = config.trim()\n                if (config.match(/([a-zA-Z0-9]+(-[a-zA-Z]+)*=[a-zA-Z0-9\\- :.']*)/)) {\n                    builder.addArgument('/overrideconfig').addArgument(config)\n                }\n            }\n        }\n\n        if (updateAssemblyInfo) {\n            builder.addArgument('/updateassemblyinfo')\n\n            // You can specify 'updateAssemblyInfo' without 'updateAssemblyInfoFilename'.\n            if (updateAssemblyInfoFilename) {\n                if (await this.isValidInputFile(workDir, updateAssemblyInfoFilename)) {\n                    builder.addArgument(updateAssemblyInfoFilename)\n                } else {\n                    throw new Error(`AssemblyInfoFilename file not found at ${updateAssemblyInfoFilename}`)\n                }\n            }\n        }\n\n        if (updateProjectFiles) {\n            builder.addArgument('/updateprojectfiles')\n        }\n\n        return builder.build()\n    }\n\n    protected getCommandArguments(workDir: string, options: CommandSettings): string[] {\n        const builder = new ArgumentsBuilder().addArgument(workDir)\n\n        if (options.disableNormalization) {\n            builder.addArgument('/nonormalize')\n        }\n\n        if (options.arguments) {\n            builder.addArguments(ArgumentsBuilder.parseArgumentString(options.arguments))\n        }\n\n        return builder.build()\n    }\n\n    private async checkShallowClone(settings: ExecuteSettings | CommandSettings, workDir: string): Promise<void> {\n        if (!settings.disableShallowCloneCheck) {\n            const isShallowResult = await this.execute('git', ['-C', workDir, 'rev-parse', '--is-shallow-repository'])\n            if (isShallowResult.code === 0 && isShallowResult.stdout?.trim() === 'true') {\n                throw new Error(\n                    'The repository is shallow. Consider disabling shallow clones. See https://github.com/GitTools/actions/blob/main/docs/cloning.md for more information.'\n                )\n            }\n        }\n    }\n\n    private toCamelCase(input: string): string {\n        return input.replace(/^\\w|[A-Z]|\\b\\w|\\s+/g, function (match, index) {\n            if (+match === 0) return '' // or if (/\\s+/.test(match)) for white spaces\n            return index === 0 ? match.toLowerCase() : match.toUpperCase()\n        })\n    }\n}\n","import { type ExecResult, type IBuildAgent } from '@agents/common'\nimport { type Commands, type GitVersionOutput } from './models'\nimport { GitVersionTool } from './tool'\nimport { RunnerBase } from '../common/runner'\n\nexport class Runner extends RunnerBase {\n    protected readonly tool: GitVersionTool\n\n    constructor(protected readonly buildAgent: IBuildAgent) {\n        super(buildAgent)\n        this.tool = new GitVersionTool(this.buildAgent)\n    }\n\n    async run(command: Commands): Promise<ExecResult> {\n        switch (command) {\n            case 'setup':\n                return await this.setup()\n            case 'execute':\n                return await this.execute()\n            case 'command':\n                return await this.command()\n        }\n    }\n\n    private async setup(): Promise<ExecResult> {\n        return this.safeExecute(async () => {\n            await this.tool.install()\n            return { code: 0 }\n        }, 'GitVersion setup successfully')\n    }\n\n    private async execute(): Promise<ExecResult> {\n        return this.safeExecute(async () => {\n            const result = await this.tool.executeJson()\n            this.buildAgent.debug('Parsing GitVersion output')\n            return this.processGitVersionOutput(result)\n        }, 'GitVersion executed successfully')\n    }\n\n    private async command(): Promise<ExecResult> {\n        return this.safeExecute(async () => await this.tool.executeCommand(), 'GitVersion executed successfully')\n    }\n\n    private processGitVersionOutput(result: ExecResult): ExecResult {\n        if (result.code === 0) {\n            const stdout = result.stdout as string\n            if (stdout.lastIndexOf('{') === -1 || stdout.lastIndexOf('}') === -1) {\n                const errorMessage = 'GitVersion output is not valid JSON, see output details'\n                this.buildAgent.debug(errorMessage)\n                this.buildAgent.setFailed(errorMessage, true)\n                return {\n                    code: -1,\n                    error: new Error(errorMessage)\n                }\n            } else {\n                const jsonOutput = stdout.substring(stdout.lastIndexOf('{'), stdout.lastIndexOf('}') + 1)\n\n                const gitVersionOutput = JSON.parse(jsonOutput) as GitVersionOutput\n                this.tool.writeGitVersionToAgent(gitVersionOutput)\n                this.tool.updateBuildNumber()\n                this.buildAgent.setSucceeded('GitVersion executed successfully', true)\n                return result\n            }\n        } else {\n            return result\n        }\n    }\n}\n"],"names":[],"mappings":"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"}
{"version":3,"file":"gitreleasemanager.mjs","sources":["../../../src/tools/gitreleasemanager/settings.ts","../../../src/tools/gitreleasemanager/tool.ts","../../../src/tools/gitreleasemanager/runner.ts"],"sourcesContent":["import { type ISettingsProvider, SettingsProvider } from '@tools/common'\nimport {\n    type AddAssetSettings,\n    type CloseSettings,\n    type CreateSettings,\n    type DiscardSettings,\n    type OpenSettings,\n    type PublishSettings,\n    type CommonSettings\n} from './models'\nexport interface IGitReleaseManagerSettingsProvider extends ISettingsProvider {\n    getCreateSettings(): CreateSettings\n\n    getDiscardSettings(): DiscardSettings\n\n    getCloseSettings(): CloseSettings\n\n    getOpenSettings(): OpenSettings\n\n    getPublishSettings(): PublishSettings\n\n    getAddAssetSettings(): AddAssetSettings\n\n    getCommonSettings(): CommonSettings\n}\n\nexport class GitReleaseManagerSettingsProvider extends SettingsProvider implements IGitReleaseManagerSettingsProvider {\n    getCreateSettings(): CreateSettings {\n        const name = this.buildAgent.getInput<CreateSettings>('name')\n        const inputFilePath = this.buildAgent.getInput<CreateSettings>('inputFilePath')\n        const isPreRelease = this.buildAgent.getBooleanInput<CreateSettings>('isPreRelease')\n        const targetcommitish = this.buildAgent.getInput<CreateSettings>('targetcommitish')\n        const assets = this.buildAgent.getListInput<CreateSettings>('assets')\n\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings,\n            name,\n            inputFilePath,\n            isPreRelease,\n            targetcommitish,\n            assets\n        }\n    }\n\n    getDiscardSettings(): DiscardSettings {\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings\n        }\n    }\n\n    getCloseSettings(): CloseSettings {\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings\n        }\n    }\n\n    getOpenSettings(): OpenSettings {\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings\n        }\n    }\n\n    getPublishSettings(): PublishSettings {\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings\n        }\n    }\n\n    getAddAssetSettings(): AddAssetSettings {\n        const assets = this.buildAgent.getListInput<AddAssetSettings>('assets')\n\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings,\n            assets\n        }\n    }\n\n    getCommonSettings(): CommonSettings {\n        const milestone = this.buildAgent.getInput<CommonSettings>('milestone')\n        const repository = this.buildAgent.getInput<CommonSettings>('repository')\n        const token = this.buildAgent.getInput<CommonSettings>('token')\n        const targetDirectory = this.buildAgent.getInput<CommonSettings>('targetDirectory')\n        const logFilePath = this.buildAgent.getInput<CommonSettings>('logFilePath')\n\n        return {\n            repository,\n            token,\n            targetDirectory,\n            milestone,\n            logFilePath\n        }\n    }\n}\n","import * as path from 'path'\n\nimport { ArgumentsBuilder, DotnetTool } from '@tools/common'\nimport { type ExecResult } from '@agents/common'\n\nimport {\n    type AddAssetSettings,\n    type CloseSettings,\n    type CreateSettings,\n    type DiscardSettings,\n    type OpenSettings,\n    type PublishSettings,\n    type CommonSettings\n} from './models'\nimport { GitReleaseManagerSettingsProvider, IGitReleaseManagerSettingsProvider } from './settings'\n\nexport class GitReleaseManagerTool extends DotnetTool {\n    get packageName(): string {\n        return 'GitReleaseManager.Tool'\n    }\n\n    get toolName(): string {\n        return 'dotnet-gitreleasemanager'\n    }\n\n    get toolPathVariable(): string {\n        return 'GITRELEASEMANAGER_PATH'\n    }\n\n    get versionRange(): string | null {\n        return '>=0.19.0 <0.21.0'\n    }\n\n    get settingsProvider(): IGitReleaseManagerSettingsProvider {\n        return new GitReleaseManagerSettingsProvider(this.buildAgent)\n    }\n\n    async create(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getCreateSettings()\n        const args = await this.getCreateArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async discard(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getDiscardSettings()\n        const args = await this.getDiscardArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async close(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getCloseSettings()\n        const args = await this.getCloseArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async open(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getOpenSettings()\n        const args = await this.getOpenArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async publish(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getPublishSettings()\n        const args = await this.getPublishArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async addAsset(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getAddAssetSettings()\n        const args = await this.getAddAssetArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    protected async getCommonArguments(settings: CommonSettings): Promise<string[]> {\n        const builder = new ArgumentsBuilder()\n\n        const [owner, repository] = settings.repository.split('/') // this is the github repository\n        builder.addKeyValue('owner', owner)\n        builder.addKeyValue('repository', repository)\n        builder.addKeyValue('token', settings.token)\n\n        settings.targetDirectory = await this.getRepoDir(settings)\n\n        builder.addKeyValue('targetDirectory', settings.targetDirectory)\n\n        if (settings.logFilePath) {\n            builder.addKeyValue('logFilePath', settings.logFilePath)\n        }\n\n        return builder.build()\n    }\n\n    protected async getCreateArguments(settings: CreateSettings): Promise<string[]> {\n        const builder = new ArgumentsBuilder().addArgument('create').addArguments(await this.getCommonArguments(settings))\n\n        if (settings.milestone) {\n            builder.addKeyValue('milestone', settings.milestone)\n        }\n        if (settings.name) {\n            builder.addKeyValue('name', settings.name)\n        }\n        if (settings.targetcommitish) {\n            builder.addKeyValue('targetcommitish', settings.targetcommitish)\n        }\n\n        if (settings.inputFilePath) {\n            if (await this.buildAgent.fileExists(settings.inputFilePath)) {\n                builder.addKeyValue('inputFilePath', settings.inputFilePath)\n            } else {\n                throw new Error(`GitReleaseManager inputFilePath not found at ${settings.inputFilePath}`)\n            }\n        }\n        if (settings.isPreRelease) {\n            builder.addFlag('pre')\n        }\n        if (settings.assets && settings.assets.length > 0) {\n            settings.assets = settings.assets.map(asset => {\n                return path.join(settings.targetDirectory, asset)\n            })\n\n            builder.addKeyValue('assets', settings.assets.join(','))\n        }\n\n        return builder.build()\n    }\n\n    protected async getDiscardArguments(settings: DiscardSettings): Promise<string[]> {\n        const builder = new ArgumentsBuilder().addArgument('discard').addArguments(await this.getCommonArguments(settings))\n\n        if (settings.milestone) {\n            builder.addKeyValue('milestone', settings.milestone)\n        }\n\n        return builder.build()\n    }\n\n    protected async getCloseArguments(settings: CloseSettings): Promise<string[]> {\n        const builder = new ArgumentsBuilder().addArgument('close').addArguments(await this.getCommonArguments(settings))\n\n        if (settings.milestone) {\n            builder.addKeyValue('milestone', settings.milestone)\n        }\n\n        return builder.build()\n    }\n\n    protected async getOpenArguments(settings: OpenSettings): Promise<string[]> {\n        const builder = new ArgumentsBuilder().addArgument('open').addArguments(await this.getCommonArguments(settings))\n\n        if (settings.milestone) {\n            builder.addKeyValue('milestone', settings.milestone)\n        }\n\n        return builder.build()\n    }\n\n    protected async getPublishArguments(settings: PublishSettings): Promise<string[]> {\n        const builder = new ArgumentsBuilder().addArgument('publish').addArguments(await this.getCommonArguments(settings))\n\n        if (settings.milestone) {\n            builder.addKeyValue('tagName', settings.milestone)\n        }\n\n        return builder.build()\n    }\n\n    protected async getAddAssetArguments(settings: AddAssetSettings): Promise<string[]> {\n        const builder = new ArgumentsBuilder().addArgument('addasset').addArguments(await this.getCommonArguments(settings))\n\n        if (settings.milestone) {\n            builder.addKeyValue('tagName', settings.milestone)\n        }\n        if (settings.assets && settings.assets.length > 0) {\n            settings.assets = settings.assets.map(asset => {\n                return path.join(settings.targetDirectory, asset)\n            })\n\n            builder.addKeyValue('assets', settings.assets.join(','))\n        }\n\n        return builder.build()\n    }\n\n    protected async getRepoDir(settings: CommonSettings): Promise<string> {\n        return await this.getRepoPath(settings.targetDirectory)\n    }\n}\n","import { type ExecResult, type IBuildAgent } from '@agents/common'\nimport { type Commands } from './models'\nimport { GitReleaseManagerTool } from './tool'\nimport { RunnerBase } from '../common/runner'\n\nexport class Runner extends RunnerBase {\n    protected readonly tool: GitReleaseManagerTool\n\n    constructor(protected readonly buildAgent: IBuildAgent) {\n        super(buildAgent)\n        this.tool = new GitReleaseManagerTool(this.buildAgent)\n    }\n\n    async run(command: Commands): Promise<ExecResult> {\n        switch (command) {\n            case 'setup':\n                return await this.setup()\n            case 'addasset':\n                return await this.addAsset()\n            case 'open':\n                return await this.open()\n            case 'close':\n                return await this.close()\n            case 'create':\n                return await this.create()\n            case 'discard':\n                return await this.discard()\n            case 'publish':\n                return await this.publish()\n        }\n    }\n\n    private async setup(): Promise<ExecResult> {\n        return this.safeExecute(async () => {\n            await this.tool.install()\n            return { code: 0 }\n        }, 'GitReleaseManager setup successfully')\n    }\n\n    private async create(): Promise<ExecResult> {\n        return this.safeExecute(async () => await this.tool.create(), 'GitReleaseManager created release successfully')\n    }\n\n    private async discard(): Promise<ExecResult> {\n        return this.safeExecute(async () => await this.tool.discard(), 'GitReleaseManager discarded release successfully')\n    }\n\n    private async close(): Promise<ExecResult> {\n        return this.safeExecute(async () => await this.tool.close(), 'GitReleaseManager closed release successfully')\n    }\n\n    private async open(): Promise<ExecResult> {\n        return this.safeExecute(async () => await this.tool.open(), 'GitReleaseManager opened release successfully')\n    }\n\n    private async publish(): Promise<ExecResult> {\n        return this.safeExecute(async () => await this.tool.publish(), 'GitReleaseManager published release successfully')\n    }\n\n    private async addAsset(): Promise<ExecResult> {\n        return this.safeExecute(async () => await this.tool.addAsset(), 'GitReleaseManager added assets to release successfully')\n    }\n}\n"],"names":[],"mappings":"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"}
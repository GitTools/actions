{"version":3,"file":"tools.mjs","sources":["../../../src/tools/common/arguments-builder.ts","../../../src/tools/common/dotnet-tool.ts","../../../src/tools/common/settings.ts","../../../src/tools/common/index.ts","../../../src/tools/common/runner.ts"],"sourcesContent":["import * as os from 'node:os'\n\nexport class ArgumentsBuilder {\n    private readonly args: string[] = []\n    private readonly isWindows: boolean = os.platform() === 'win32'\n\n    /**\n     * Adds a simple argument without a key\n     * @param value The argument value\n     */\n    addArgument(value: string): this {\n        if (value) {\n            this.args.push(this.escapeArgument(value))\n        }\n        return this\n    }\n\n    /**\n     * Adds multiple arguments\n     * @param values The argument values\n     */\n    addArguments(values: string[]): this {\n        for (const value of values) {\n            this.addArgument(value)\n        }\n        return this\n    }\n\n    /**\n     * Adds a flag argument (--flag)\n     * @param key The flag name\n     */\n    addFlag(key: string): this {\n        if (key) {\n            this.args.push(`--${key}`)\n        }\n        return this\n    }\n\n    /**\n     * Adds a key-value argument (--key value)\n     * @param key The argument key\n     * @param value The argument value\n     */\n    addKeyValue(key: string, value?: string | null): this {\n        if (key && value !== undefined && value !== null) {\n            this.args.push(`--${key}`)\n            this.args.push(this.escapeArgument(value))\n        }\n        return this\n    }\n\n    /**\n     * Adds an equals-style argument (--key=value)\n     * @param key The argument key\n     * @param value The argument value\n     */\n    addKeyValueEquals(key: string, value?: string | null): this {\n        if (key && value !== undefined && value !== null) {\n            this.args.push(`--${key}=${this.escapeArgument(value)}`)\n        }\n        return this\n    }\n\n    /**\n     * Adds a comma-separated list (--key value1,value2,value3)\n     * @param key The argument key\n     * @param values The list of values\n     */\n    addCommaList(key: string, values?: string[]): this {\n        if (key && values && values.length > 0) {\n            const escapedValues = values.map(v => this.escapeArgument(v))\n            this.args.push(`--${key}`)\n            this.args.push(escapedValues.join(','))\n        }\n        return this\n    }\n\n    /**\n     * Escapes an argument value based on the current OS\n     * @param value The argument value to escape\n     * @returns The escaped argument value\n     */\n    private escapeArgument(value: string): string {\n        if (!value) return value\n\n        // No need to escape if it doesn't contain spaces or special chars\n        if (!this.needsEscaping(value)) return value\n\n        if (this.isWindows) {\n            // On Windows, wrap in double quotes and escape inner double quotes with backslash\n            return `\"${value.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`\n        } else {\n            // On Unix, wrap in single quotes and escape inner single quotes\n            // Escaping single quotes in bash requires closing the quote, adding an escaped quote, and reopening\n            return `'${value.replace(/'/g, \"'\\\\''\")}'`\n        }\n    }\n\n    /**\n     * Determines if a value needs to be escaped\n     * @param value The value to check\n     * @returns True if the value needs escaping\n     */\n    private needsEscaping(value: string): boolean {\n        const windowsNeedsEscaping = /[\\s&|<>^(){}[\\]\"']/\n        const unixNeedsEscaping = /[\\s$\\\\`&|<>(){}[\\]\"']/\n        if (this.isWindows) {\n            return windowsNeedsEscaping.test(value)\n        }\n        return unixNeedsEscaping.test(value)\n    }\n\n    /**\n     * Returns the built argument array\n     */\n    build(): string[] {\n        return [...this.args]\n    }\n\n    /**\n     * Parses an argument string into an array\n     * @param argString The argument string to parse\n     * @returns Array of parsed arguments\n     */\n    static parseArgumentString(argString: string): string[] {\n        const args: string[] = []\n\n        let inQuotes = false\n        let escaped = false\n        let lastCharWasSpace = true\n        let arg = ''\n\n        const append = (c: string): void => {\n            // Only add a backslash for escaped characters other than quotes or backslashes\n            if (escaped && c !== '\"' && c !== '\\\\') {\n                arg += '\\\\'\n            }\n\n            arg += c\n            escaped = false\n        }\n\n        for (let i = 0; i < argString.length; i++) {\n            const c = argString.charAt(i)\n\n            if (c === ' ' && !inQuotes) {\n                if (!lastCharWasSpace) {\n                    args.push(arg)\n                    arg = ''\n                }\n                lastCharWasSpace = true\n                continue\n            } else {\n                lastCharWasSpace = false\n            }\n\n            if (c === '\"') {\n                if (!escaped) {\n                    inQuotes = !inQuotes\n                } else {\n                    append(c)\n                }\n                continue\n            }\n\n            if (c === '\\\\' && escaped) {\n                // Double backslash becomes a single backslash\n                arg += '\\\\'\n                escaped = false\n                continue\n            }\n\n            if (c === '\\\\' && inQuotes) {\n                escaped = true\n                continue\n            }\n\n            append(c)\n            lastCharWasSpace = false\n        }\n\n        if (!lastCharWasSpace) {\n            args.push(arg.trim())\n        }\n\n        return args\n    }\n}\n","import * as crypto from 'node:crypto'\nimport * as fs from 'node:fs/promises'\nimport * as os from 'node:os'\nimport * as path from 'node:path'\n\nimport * as semver from 'semver'\nimport { type IBuildAgent, type ExecResult } from '@agents/common'\nimport { ISettingsProvider } from './settings'\nimport { NugetVersions } from './models'\nimport { ArgumentsBuilder } from './arguments-builder'\n\nexport interface IDotnetTool {\n    toolName: string\n\n    disableTelemetry(): void\n\n    install(): Promise<string>\n}\n\nexport abstract class DotnetTool implements IDotnetTool {\n    private static readonly nugetRoot: string = 'https://azuresearch-usnc.nuget.org/query'\n\n    constructor(protected buildAgent: IBuildAgent) {}\n\n    abstract get packageName(): string\n\n    abstract get toolName(): string\n\n    abstract get toolPathVariable(): string\n\n    abstract get versionRange(): string | null\n\n    abstract get settingsProvider(): ISettingsProvider\n\n    disableTelemetry(): void {\n        this.buildAgent.info('Disable Telemetry')\n        this.buildAgent.setVariable('DOTNET_CLI_TELEMETRY_OPTOUT', 'true')\n        this.buildAgent.setVariable('DOTNET_NOLOGO', 'true')\n    }\n\n    async install(): Promise<string> {\n        const dotnetExePath = await this.buildAgent.which('dotnet', true)\n        this.buildAgent.debug(`whichPath: ${dotnetExePath}`)\n        await this.setDotnetRoot()\n\n        const setupSettings = this.settingsProvider.getSetupSettings()\n\n        let version: string | null = semver.clean(setupSettings.versionSpec) || setupSettings.versionSpec\n        this.buildAgent.info('--------------------------')\n        this.buildAgent.info(`Acquiring ${this.packageName} for version spec: ${version}`)\n        this.buildAgent.info('--------------------------')\n\n        if (!this.isExplicitVersion(version)) {\n            version = await this.queryLatestMatch(this.packageName, version, setupSettings.includePrerelease)\n            if (!version) {\n                throw new Error(`Unable to find ${this.packageName} version '${version}'.`)\n            }\n        }\n\n        if (this.versionRange && !semver.satisfies(version, this.versionRange, { includePrerelease: setupSettings.includePrerelease })) {\n            throw new Error(\n                `Version spec '${setupSettings.versionSpec}' resolved as '${version}' does not satisfy the range '${this.versionRange}'.` +\n                    'See https://github.com/GitTools/actions/blob/main/docs/versions.md for more information.'\n            )\n        }\n\n        let toolPath: string | null = null\n        if (!setupSettings.preferLatestVersion) {\n            // Let's try and resolve the version locally first\n            toolPath = await this.buildAgent.findLocalTool(this.packageName, version)\n            if (toolPath) {\n                this.buildAgent.info('--------------------------')\n                this.buildAgent.info(`${this.packageName} version: ${version} found in local cache at ${toolPath}.`)\n                this.buildAgent.info('--------------------------')\n            }\n        }\n\n        if (!toolPath) {\n            // Download, extract, cache\n            toolPath = await this.installTool(this.packageName, version, setupSettings.ignoreFailedSources, setupSettings.nugetConfigPath)\n            this.buildAgent.info('--------------------------')\n            this.buildAgent.info(`${this.packageName} version: ${version} installed.`)\n            this.buildAgent.info('--------------------------')\n        }\n\n        // Prepend the tool's path. This prepends the PATH for the current process and\n        // instructs the agent to prepend for each task that follows.\n        this.buildAgent.info(`Prepending ${toolPath} to PATH`)\n        this.buildAgent.addPath(toolPath)\n\n        const pathVariable = this.toolPathVariable\n        this.buildAgent.info(`Set ${pathVariable} to ${toolPath}`)\n        this.buildAgent.setVariable(pathVariable, toolPath)\n        this.buildAgent.setSucceeded(`${this.toolName} installed successfully`, true)\n\n        return toolPath\n    }\n\n    protected async execute(cmd: string, args: string[]): Promise<ExecResult> {\n        this.buildAgent.info(`Command: ${cmd} ${args.join(' ')}`)\n        return await this.buildAgent.exec(cmd, args)\n    }\n\n    protected async findToolExecutable(toolBasePath: string): Promise<string | null> {\n        const toolName = os.platform() === 'win32' ? `${this.toolName}.exe` : this.toolName\n\n        // Check in the base path first\n        const toolPath = path.join(toolBasePath, toolName)\n        if (await this.buildAgent.fileExists(toolPath)) {\n            return toolPath\n        }\n\n        // Get current system architecture\n        const arch = os.arch()\n        this.buildAgent.debug(`Current system architecture: ${arch}`)\n\n        // Map node's architecture names to .NET's architecture folders\n        const archPaths = []\n\n        // Add primary architecture path based on current architecture\n        if (arch === 'x64') {\n            archPaths.push(path.join(toolBasePath, 'x64', toolName))\n        } else if (arch === 'arm64') {\n            archPaths.push(path.join(toolBasePath, 'arm64', toolName))\n        }\n\n        // Add platform-specific architecture paths\n        if (os.platform() === 'darwin' && arch === 'arm64') {\n            archPaths.push(path.join(toolBasePath, 'osx-arm64', toolName))\n        } else if (os.platform() === 'darwin' && arch === 'x64') {\n            archPaths.push(path.join(toolBasePath, 'osx-x64', toolName))\n        }\n\n        // Try each architecture-specific path\n        for (const archPath of archPaths) {\n            if (await this.buildAgent.fileExists(archPath)) {\n                this.buildAgent.debug(`Found tool in architecture-specific directory: ${archPath}`)\n                return archPath\n            }\n        }\n\n        // Check in any other subdirectory as a fallback\n        try {\n            const entries = await fs.readdir(toolBasePath, { withFileTypes: true })\n            for (const entry of entries) {\n                if (entry.isDirectory()) {\n                    const nestedPath = path.join(toolBasePath, entry.name, toolName)\n                    if (await this.buildAgent.fileExists(nestedPath)) {\n                        this.buildAgent.debug(`Found tool in subdirectory: ${entry.name}`)\n                        return nestedPath\n                    }\n                }\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.debug(`Error reading subdirectories: ${error.message}`)\n            }\n        }\n\n        return null\n    }\n\n    protected async setDotnetRoot(): Promise<void> {\n        if (os.platform() !== 'win32' && !this.buildAgent.getVariable('DOTNET_ROOT')) {\n            let dotnetPath = await this.buildAgent.which('dotnet', true)\n\n            const stats = await fs.lstat(dotnetPath)\n            if (stats.isSymbolicLink()) {\n                dotnetPath = (await fs.readlink(dotnetPath)) || dotnetPath\n            }\n            const dotnetRoot = path.dirname(dotnetPath)\n            this.buildAgent.setVariable('DOTNET_ROOT', dotnetRoot)\n        }\n    }\n\n    protected async executeTool(args: string[]): Promise<ExecResult> {\n        // First, check if we have a path variable set\n        const variablePath = this.buildAgent.getVariableAsPath(this.toolPathVariable)\n        let toolPath: string | undefined\n\n        if (variablePath) {\n            // Try to find the executable in the path or its subdirectories\n            const foundExecutable = await this.findToolExecutable(variablePath)\n            if (foundExecutable) {\n                toolPath = foundExecutable\n                this.buildAgent.debug(`Found tool executable at: ${toolPath}`)\n            } else {\n                // Fallback to old behavior if executable not found\n                toolPath = path.join(variablePath, os.platform() === 'win32' ? `${this.toolName}.exe` : this.toolName)\n                this.buildAgent.debug(`Defaulting to expected tool path: ${toolPath}`)\n            }\n        }\n\n        // If we still don't have a path, try to find it in PATH\n        if (!toolPath) {\n            toolPath = await this.buildAgent.which(this.toolName, true)\n        }\n\n        args = ['--roll-forward Major', ...args]\n        return await this.execute(toolPath, args)\n    }\n\n    protected async isValidInputFile(workDir: string, file: string): Promise<boolean> {\n        if (!file) {\n            this.buildAgent.debug('No file path supplied')\n            return false\n        }\n        if (path.isAbsolute(file)) {\n            this.buildAgent.debug('File path is absolute')\n            return await this.buildAgent.fileExists(file)\n        }\n        const filePath = path.resolve(workDir, file)\n        this.buildAgent.debug(`Resolved file path: ${filePath}`)\n        return await this.buildAgent.fileExists(filePath)\n    }\n\n    protected async getRepoPath(targetPath: string): Promise<string> {\n        const srcDir = this.buildAgent.sourceDir || '.'\n        let workDir: string\n        if (!targetPath) {\n            workDir = srcDir\n        } else {\n            if (!path.isAbsolute(targetPath)) {\n                targetPath = path.resolve(targetPath)\n            }\n            if (await this.buildAgent.directoryExists(targetPath)) {\n                workDir = targetPath\n            } else {\n                throw new Error(`Directory not found at ${targetPath}`)\n            }\n        }\n        return path.normalize(workDir)\n    }\n\n    private async queryLatestMatch(toolName: string, versionSpec: string, includePrerelease: boolean): Promise<string | null> {\n        this.buildAgent.info(\n            `Querying tool versions for ${toolName}${versionSpec ? `@${versionSpec}` : ''} ${includePrerelease ? 'including pre-releases' : ''}`\n        )\n\n        const toolNameParam = encodeURIComponent(toolName.toLowerCase())\n        const prereleaseParam = includePrerelease ? 'true' : 'false'\n        const downloadPath = `${DotnetTool.nugetRoot}?q=${toolNameParam}&prerelease=${prereleaseParam}&semVerLevel=2.0.0&take=1`\n\n        const response = await fetch(downloadPath)\n\n        if (!response || !response.ok) {\n            this.buildAgent.info(`failed to query latest version for ${toolName} from ${downloadPath}. Status code: ${response ? response.status : 'unknown'}`)\n            return null\n        }\n\n        const { data } = (await response.json()) as NugetVersions\n\n        const versions = data[0].versions.map(x => x.version)\n        if (!versions || !versions.length) {\n            return null\n        }\n\n        this.buildAgent.debug(`got versions: ${versions.join(', ')}`)\n\n        const version = semver.maxSatisfying(versions, versionSpec, { includePrerelease })\n        if (version) {\n            this.buildAgent.info(`Found matching version: ${version}`)\n        } else {\n            this.buildAgent.info('match not found')\n        }\n\n        return version\n    }\n\n    private async installTool(toolName: string, version: string, ignoreFailedSources: boolean, nugetConfigPath?: string): Promise<string> {\n        const semverVersion = semver.clean(version)\n        if (!semverVersion) {\n            throw new Error(`Invalid version spec: ${version}`)\n        }\n\n        const tempDirectory = await this.createTempDirectory()\n\n        if (!tempDirectory) {\n            throw new Error('Unable to create temp directory')\n        }\n\n        const builder = new ArgumentsBuilder()\n            .addArgument('tool')\n            .addArgument('install')\n            .addArgument(toolName)\n            .addKeyValue('tool-path', tempDirectory)\n            .addKeyValue('version', semverVersion)\n\n        if (ignoreFailedSources) {\n            builder.addFlag('ignore-failed-sources')\n        }\n\n        if (nugetConfigPath) {\n            builder.addKeyValue('configfile', nugetConfigPath)\n        }\n\n        const result = await this.execute('dotnet', builder.build())\n        const status = result.code === 0 ? 'success' : 'failure'\n        const message = result.code === 0 ? result.stdout : result.stderr\n\n        this.buildAgent.debug(`Tool install result: ${status} ${message}`)\n\n        if (result.code !== 0) {\n            throw new Error(message)\n        }\n\n        const toolPath = await this.buildAgent.cacheToolDirectory(tempDirectory, toolName, semverVersion)\n        this.buildAgent.debug(`Cached tool path: ${toolPath}`)\n        this.buildAgent.debug(`Cleaning up temp directory: ${tempDirectory}`)\n        await this.buildAgent.removeDirectory(tempDirectory)\n\n        return toolPath\n    }\n\n    async createTempDirectory(): Promise<string> {\n        const tempRootDir = this.buildAgent.tempDir\n        if (!tempRootDir) {\n            throw new Error('Temp directory not set')\n        }\n\n        const uuid = crypto.randomUUID()\n        const tempPath = path.join(tempRootDir, uuid)\n        this.buildAgent.debug(`Creating temp directory ${tempPath}`)\n        await fs.mkdir(tempPath, { recursive: true })\n        return tempPath\n    }\n\n    private isExplicitVersion(versionSpec: string): boolean {\n        const cleanedVersionSpec = semver.clean(versionSpec)\n        const valid = semver.valid(cleanedVersionSpec) != null\n        this.buildAgent.debug(`Is version explicit? ${valid}`)\n\n        return valid\n    }\n}\n","import { type IBuildAgent } from '@agents/common'\nimport { type SetupSettings } from './models'\n\nexport interface ISettingsProvider {\n    getSetupSettings(): SetupSettings\n}\n\nexport class SettingsProvider implements ISettingsProvider {\n    constructor(protected buildAgent: IBuildAgent) {}\n\n    getSetupSettings(): SetupSettings {\n        const versionSpec = this.buildAgent.getInput<SetupSettings>('versionSpec')\n        const includePrerelease = this.buildAgent.getBooleanInput<SetupSettings>('includePrerelease')\n        const ignoreFailedSources = this.buildAgent.getBooleanInput<SetupSettings>('ignoreFailedSources')\n        const preferLatestVersion = this.buildAgent.getBooleanInput<SetupSettings>('preferLatestVersion')\n        const nugetConfigPath = this.buildAgent.getInput<SetupSettings>('nugetConfigPath', false)\n\n        return {\n            versionSpec,\n            includePrerelease,\n            ignoreFailedSources,\n            preferLatestVersion,\n            nugetConfigPath\n        }\n    }\n}\n","export * from './models'\nexport * from './dotnet-tool'\nexport * from './settings'\nexport * from './arguments-builder'\n\nexport const keysOf = Object.keys as <T extends object>(obj: T) => (keyof T)[]\n","import type { IRunner } from './models.ts'\nimport { ExecResult, IBuildAgent } from '@agents/common'\nimport { IDotnetTool } from './dotnet-tool.ts'\n\nexport abstract class RunnerBase implements IRunner {\n    protected abstract tool: IDotnetTool\n\n    abstract run(command: string): Promise<ExecResult>\n\n    protected constructor(protected readonly buildAgent: IBuildAgent) {}\n\n    protected disableTelemetry(): void {\n        this.buildAgent.info(`Running on: '${this.buildAgent.agentName}'`)\n        this.buildAgent.debug('Disabling telemetry')\n        this.tool.disableTelemetry()\n    }\n\n    protected async safeExecute(action: () => Promise<ExecResult>, successMessage: string): Promise<ExecResult> {\n        try {\n            this.disableTelemetry()\n            const result = await action()\n\n            if (result.stdout) {\n                this.buildAgent.info(`${this.tool.toolName} Output:`)\n                this.buildAgent.info('-------------------')\n                this.buildAgent.info(result.stdout)\n                this.buildAgent.info('-------------------')\n            }\n            if (result.code === 0) {\n                this.buildAgent.debug(`${this.tool.toolName} succeeded`)\n                this.buildAgent.setSucceeded(successMessage, true)\n                return result\n            } else {\n                this.buildAgent.debug(`${this.tool.toolName} failed`)\n                this.buildAgent.error(result.stderr as string)\n                this.buildAgent.setFailed(result.stderr as string, true)\n                return result\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.debug(`${this.tool.toolName} failed`)\n                this.buildAgent.error(error.message)\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return {\n                code: -1,\n                error: error as Error\n            }\n        }\n    }\n}\n"],"names":["semver.clean","semver.satisfies","semver.maxSatisfying","semver.valid"],"mappings":"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"}
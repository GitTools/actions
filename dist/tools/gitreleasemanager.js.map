{"version":3,"file":"gitreleasemanager.js","sources":["../../src/tools/gitreleasemanager/models.ts","../../src/tools/gitreleasemanager/settings.ts","../../src/tools/gitreleasemanager/tool.ts","../../src/tools/gitreleasemanager/runner.ts","../../src/tools/gitreleasemanager/main.ts"],"sourcesContent":["export type Commands = 'setup' | 'addasset' | 'close' | 'create' | 'discard' | 'open' | 'publish'\n\nexport enum CommonFields {\n    repository = 'repository',\n    owner = 'owner',\n    token = 'token',\n    targetDirectory = 'targetDirectory'\n}\n\nexport enum CreateFields {\n    milestone = 'milestone',\n    name = 'name',\n    inputFileName = 'inputFileName',\n    isPreRelease = 'isPreRelease',\n    commit = 'commit',\n    assets = 'assets'\n}\n\nexport enum DiscardFields {\n    milestone = 'milestone'\n}\n\nexport enum CloseFields {\n    milestone = 'milestone'\n}\n\nexport enum OpenFields {\n    milestone = 'milestone'\n}\n\nexport enum PublishFields {\n    tagName = 'tagName'\n}\n\nexport enum AddAssetFields {\n    tagName = 'tagName',\n    assets = 'assets'\n}\n\nexport type GitReleaseManagerSettings = {\n    [CommonFields.repository]: string\n    [CommonFields.owner]: string\n    [CommonFields.token]: string\n    [CommonFields.targetDirectory]: string\n}\n\nexport interface GitReleaseManagerCreateSettings extends GitReleaseManagerSettings {\n    [CreateFields.milestone]: string\n    [CreateFields.name]: string\n    [CreateFields.inputFileName]: string\n    [CreateFields.isPreRelease]: boolean\n    [CreateFields.commit]: string\n    [CreateFields.assets]?: string[]\n}\n\nexport interface GitReleaseManagerDiscardSettings extends GitReleaseManagerSettings {\n    [DiscardFields.milestone]: string\n}\n\nexport interface GitReleaseManagerCloseSettings extends GitReleaseManagerSettings {\n    [CloseFields.milestone]: string\n}\n\nexport interface GitReleaseManagerOpenSettings extends GitReleaseManagerSettings {\n    [OpenFields.milestone]: string\n}\n\nexport interface GitReleaseManagerPublishSettings extends GitReleaseManagerSettings {\n    [PublishFields.tagName]: string\n}\n\nexport interface GitReleaseManagerAddAssetSettings extends GitReleaseManagerSettings {\n    [AddAssetFields.tagName]: string\n    [AddAssetFields.assets]: string[]\n}\n","import { ISettingsProvider, SettingsProvider } from '@tools/common'\nimport {\n    AddAssetFields,\n    CloseFields,\n    CommonFields,\n    CreateFields,\n    DiscardFields,\n    type GitReleaseManagerAddAssetSettings,\n    type GitReleaseManagerCloseSettings,\n    type GitReleaseManagerCreateSettings,\n    type GitReleaseManagerDiscardSettings,\n    type GitReleaseManagerOpenSettings,\n    type GitReleaseManagerPublishSettings,\n    type GitReleaseManagerSettings,\n    OpenFields,\n    PublishFields\n} from './models'\n\nexport interface IGitReleaseManagerSettingsProvider extends ISettingsProvider {\n    getCreateSettings(): GitReleaseManagerCreateSettings\n\n    getDiscardSettings(): GitReleaseManagerDiscardSettings\n\n    getCloseSettings(): GitReleaseManagerCloseSettings\n\n    getOpenSettings(): GitReleaseManagerOpenSettings\n\n    getPublishSettings(): GitReleaseManagerPublishSettings\n\n    getAddAssetSettings(): GitReleaseManagerAddAssetSettings\n\n    getCommonSettings(): GitReleaseManagerSettings\n}\n\nexport class GitReleaseManagerSettingsProvider extends SettingsProvider implements IGitReleaseManagerSettingsProvider {\n    getCreateSettings(): GitReleaseManagerCreateSettings {\n        const milestone = this.buildAgent.getInput(CreateFields.milestone)\n        const name = this.buildAgent.getInput(CreateFields.name)\n        const inputFileName = this.buildAgent.getInput(CreateFields.inputFileName)\n        const isPreRelease = this.buildAgent.getBooleanInput(CreateFields.isPreRelease)\n        const commit = this.buildAgent.getInput(CreateFields.commit)\n        const assets = this.buildAgent.getListInput(CreateFields.assets)\n\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings,\n            milestone,\n            name,\n            inputFileName,\n            isPreRelease,\n            commit,\n            assets\n        }\n    }\n\n    getDiscardSettings(): GitReleaseManagerDiscardSettings {\n        const milestone = this.buildAgent.getInput(DiscardFields.milestone)\n\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings,\n            milestone\n        }\n    }\n\n    getCloseSettings(): GitReleaseManagerCloseSettings {\n        const milestone = this.buildAgent.getInput(CloseFields.milestone)\n\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings,\n            milestone\n        }\n    }\n\n    getOpenSettings(): GitReleaseManagerOpenSettings {\n        const milestone = this.buildAgent.getInput(OpenFields.milestone)\n\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings,\n            milestone\n        }\n    }\n\n    getPublishSettings(): GitReleaseManagerPublishSettings {\n        const tagName = this.buildAgent.getInput(PublishFields.tagName)\n\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings,\n            tagName\n        }\n    }\n\n    getAddAssetSettings(): GitReleaseManagerAddAssetSettings {\n        const tagName = this.buildAgent.getInput(AddAssetFields.tagName)\n        const assets = this.buildAgent.getListInput(AddAssetFields.assets)\n\n        const commonSettings = this.getCommonSettings()\n        return {\n            ...commonSettings,\n            tagName,\n            assets\n        }\n    }\n\n    getCommonSettings(): GitReleaseManagerSettings {\n        const owner = this.buildAgent.getInput(CommonFields.owner, true)\n        const repository = this.buildAgent.getInput(CommonFields.repository, true)\n        const token = this.buildAgent.getInput(CommonFields.token, true)\n        const targetDirectory = this.buildAgent.getInput(CommonFields.targetDirectory)\n\n        return {\n            owner,\n            repository,\n            token,\n            targetDirectory\n        }\n    }\n}\n","import * as path from 'path'\n\nimport { DotnetTool } from '@tools/common'\nimport { ExecResult } from '@agents/common'\n\nimport {\n    type GitReleaseManagerAddAssetSettings,\n    type GitReleaseManagerCloseSettings,\n    type GitReleaseManagerCreateSettings,\n    type GitReleaseManagerDiscardSettings,\n    type GitReleaseManagerOpenSettings,\n    type GitReleaseManagerPublishSettings,\n    type GitReleaseManagerSettings\n} from './models'\nimport { GitReleaseManagerSettingsProvider, IGitReleaseManagerSettingsProvider } from './settings'\n\nexport class GitReleaseManagerTool extends DotnetTool {\n    get packageName(): string {\n        return 'GitReleaseManager.Tool'\n    }\n\n    get toolName(): string {\n        return 'dotnet-gitreleasemanager'\n    }\n\n    get toolPathVariable(): string {\n        return 'GITRELEASEMANAGER_PATH'\n    }\n\n    get versionRange(): string | null {\n        return '>=0.10.0 <0.18.0'\n    }\n\n    get settingsProvider(): IGitReleaseManagerSettingsProvider {\n        return new GitReleaseManagerSettingsProvider(this.buildAgent)\n    }\n\n    async create(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getCreateSettings()\n        const args = await this.getCreateArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async discard(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getDiscardSettings()\n        const args = await this.getDiscardArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async close(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getCloseSettings()\n        const args = await this.getCloseArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async open(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getOpenSettings()\n        const args = await this.getOpenArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async publish(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getPublishSettings()\n        const args = await this.getPublishArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    async addAsset(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getAddAssetSettings()\n        const args = await this.getAddAssetArguments(settings)\n\n        return await this.executeTool(args)\n    }\n\n    protected async getCommonArguments(settings: GitReleaseManagerSettings): Promise<string[]> {\n        const args: string[] = []\n\n        args.push('--owner', settings.owner)\n        args.push('--repository', settings.repository)\n        args.push('--token', settings.token)\n\n        settings.targetDirectory = await this.getRepoDir(settings)\n\n        args.push('--targetDirectory', settings.targetDirectory)\n\n        return args\n    }\n\n    protected async getCreateArguments(settings: GitReleaseManagerCreateSettings): Promise<string[]> {\n        const args: string[] = ['create', ...(await this.getCommonArguments(settings))]\n\n        if (settings.milestone) {\n            args.push('--milestone', settings.milestone)\n        }\n        if (settings.name) {\n            args.push('--name', settings.name)\n        }\n        if (settings.commit) {\n            args.push('--targetcommitish', settings.commit)\n        }\n\n        if (settings.inputFileName) {\n            if (await this.buildAgent.fileExists(settings.inputFileName)) {\n                args.push('--inputFilePath', settings.inputFileName)\n            } else {\n                throw new Error(`GitReleaseManager inputFilePath not found at ${settings.inputFileName}`)\n            }\n        }\n        if (settings.isPreRelease) {\n            args.push('--pre')\n        }\n        if (settings.assets && settings.assets.length > 0) {\n            settings.assets = settings.assets.map(asset => {\n                return path.join(settings.targetDirectory, asset)\n            })\n\n            args.push('--assets', settings.assets.join(','))\n        }\n\n        return args\n    }\n\n    protected async getDiscardArguments(settings: GitReleaseManagerDiscardSettings): Promise<string[]> {\n        const args: string[] = ['discard', ...(await this.getCommonArguments(settings))]\n\n        if (settings.milestone) {\n            args.push('--milestone', settings.milestone)\n        }\n\n        return args\n    }\n\n    protected async getCloseArguments(settings: GitReleaseManagerCloseSettings): Promise<string[]> {\n        const args: string[] = ['close', ...(await this.getCommonArguments(settings))]\n\n        if (settings.milestone) {\n            args.push('--milestone', settings.milestone)\n        }\n\n        return args\n    }\n\n    protected async getOpenArguments(settings: GitReleaseManagerOpenSettings): Promise<string[]> {\n        const args: string[] = ['open', ...(await this.getCommonArguments(settings))]\n\n        if (settings.milestone) {\n            args.push('--milestone', settings.milestone)\n        }\n\n        return args\n    }\n\n    protected async getPublishArguments(settings: GitReleaseManagerPublishSettings): Promise<string[]> {\n        const args: string[] = ['publish', ...(await this.getCommonArguments(settings))]\n\n        if (settings.tagName) {\n            args.push('--tagName', settings.tagName)\n        }\n\n        return args\n    }\n\n    protected async getAddAssetArguments(settings: GitReleaseManagerAddAssetSettings): Promise<string[]> {\n        const args: string[] = ['addasset', ...(await this.getCommonArguments(settings))]\n\n        if (settings.tagName) {\n            args.push('--tagName', settings.tagName)\n        }\n        if (settings.assets && settings.assets.length > 0) {\n            settings.assets = settings.assets.map(asset => {\n                return path.join(settings.targetDirectory, asset)\n            })\n\n            args.push('--assets', settings.assets.join(','))\n        }\n\n        return args\n    }\n\n    protected async getRepoDir(settings: GitReleaseManagerSettings): Promise<string> {\n        return await this.getRepoPath(settings.targetDirectory)\n    }\n}\n","import { IBuildAgent } from '@agents/common'\nimport { type Commands } from './models'\nimport { GitReleaseManagerTool } from './tool'\n\nexport class Runner {\n    private readonly gitReleaseManagerTool: GitReleaseManagerTool\n\n    constructor(private readonly buildAgent: IBuildAgent) {\n        this.gitReleaseManagerTool = new GitReleaseManagerTool(this.buildAgent)\n    }\n\n    async run(command: Commands): Promise<number> {\n        switch (command) {\n            case 'setup':\n                return await this.setup()\n            case 'addasset':\n                return await this.addAsset()\n            case 'open':\n                return await this.open()\n            case 'close':\n                return await this.close()\n            case 'create':\n                return await this.create()\n            case 'discard':\n                return await this.discard()\n            case 'publish':\n                return await this.publish()\n        }\n    }\n\n    private async setup(): Promise<number> {\n        try {\n            this.disableTelemetry()\n\n            this.buildAgent.debug('Installing GitReleaseManager')\n            const toolPath = await this.gitReleaseManagerTool.install()\n\n            const pathVariable = this.gitReleaseManagerTool.toolPathVariable\n            this.buildAgent.info(`Set ${pathVariable} to ${toolPath}`)\n            this.buildAgent.setVariable(pathVariable, toolPath)\n\n            this.buildAgent.setSucceeded('GitReleaseManager installed successfully', true)\n            return 0\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return -1\n        }\n    }\n\n    private async create(): Promise<number> {\n        try {\n            this.disableTelemetry()\n\n            this.buildAgent.debug('Creating release')\n\n            await this.gitReleaseManagerTool.create()\n\n            this.buildAgent.setSucceeded('GitReleaseManager created release successfully', true)\n            return 0\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return -1\n        }\n    }\n\n    private async discard(): Promise<number> {\n        try {\n            this.disableTelemetry()\n\n            this.buildAgent.debug('Discarding release')\n\n            await this.gitReleaseManagerTool.discard()\n\n            this.buildAgent.setSucceeded('GitReleaseManager discarded release successfully', true)\n            return 0\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return -1\n        }\n    }\n\n    private async close(): Promise<number> {\n        try {\n            this.disableTelemetry()\n\n            this.buildAgent.debug('Closing release')\n\n            await this.gitReleaseManagerTool.close()\n\n            this.buildAgent.setSucceeded('GitReleaseManager closed release successfully', true)\n            return 0\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return -1\n        }\n    }\n\n    private async open(): Promise<number> {\n        try {\n            this.disableTelemetry()\n\n            this.buildAgent.debug('Opening release')\n\n            await this.gitReleaseManagerTool.open()\n\n            this.buildAgent.setSucceeded('GitReleaseManager opened release successfully', true)\n            return 0\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return -1\n        }\n    }\n\n    private async publish(): Promise<number> {\n        try {\n            this.disableTelemetry()\n\n            this.buildAgent.debug('Publishing release')\n\n            await this.gitReleaseManagerTool.publish()\n\n            this.buildAgent.setSucceeded('GitReleaseManager published release successfully', true)\n            return 0\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return -1\n        }\n    }\n\n    private async addAsset(): Promise<number> {\n        try {\n            this.disableTelemetry()\n\n            this.buildAgent.debug('Adding asset to release')\n\n            await this.gitReleaseManagerTool.addAsset()\n\n            this.buildAgent.setSucceeded('GitReleaseManager added assets to release successfully', true)\n            return 0\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return -1\n        }\n    }\n\n    private disableTelemetry(): void {\n        this.buildAgent.info(`Running on: '${this.buildAgent.agentName}'`)\n        this.buildAgent.debug('Disabling telemetry')\n        this.gitReleaseManagerTool.disableTelemetry()\n    }\n}\n","import { getAgent } from '@agents/common'\nimport { parseCliArgs } from '@tools/common'\nimport { type Commands, Runner } from '@tools/gitreleasemanager'\n\nconst { command, buildAgent } = parseCliArgs()\nconst agent = await getAgent(buildAgent)\nconst runner = new Runner(agent)\nawait runner.run(command as Commands)\n"],"names":["CommonFields","CreateFields","DiscardFields","CloseFields","OpenFields","PublishFields","AddAssetFields"],"mappings":"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"}
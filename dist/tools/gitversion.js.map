{"version":3,"file":"gitversion.js","sources":["../../src/tools/gitversion/models.ts","../../src/tools/gitversion/settings.ts","../../src/tools/gitversion/tool.ts","../../src/tools/gitversion/runner.ts","../../src/tools/gitversion/main.ts"],"sourcesContent":["export type Commands = 'setup' | 'execute'\n\nexport enum ExecuteFields {\n    targetPath = 'targetPath',\n    disableCache = 'disableCache',\n    disableNormalization = 'disableNormalization',\n    disableShallowCloneCheck = 'disableShallowCloneCheck',\n    useConfigFile = 'useConfigFile',\n    configFilePath = 'configFilePath',\n    overrideConfig = 'overrideConfig',\n    updateAssemblyInfo = 'updateAssemblyInfo',\n    updateAssemblyInfoFilename = 'updateAssemblyInfoFilename',\n    additionalArguments = 'additionalArguments'\n}\n\nexport type GitVersionSettings = {\n    [ExecuteFields.targetPath]: string\n    [ExecuteFields.disableCache]: boolean\n    [ExecuteFields.disableNormalization]: boolean\n    [ExecuteFields.disableShallowCloneCheck]: boolean\n    [ExecuteFields.useConfigFile]: boolean\n    [ExecuteFields.configFilePath]: string\n    [ExecuteFields.overrideConfig]: string[]\n    [ExecuteFields.updateAssemblyInfo]: boolean\n    [ExecuteFields.updateAssemblyInfoFilename]: string\n    [ExecuteFields.additionalArguments]: string\n}\n\nexport type GitVersionOutput = {\n    Major: number\n    Minor: number\n    Patch: number\n    PreReleaseTag: string\n    PreReleaseTagWithDash: string\n    PreReleaseLabel: string\n    PreReleaseNumber: number\n    WeightedPreReleaseNumber: number\n    BuildMetaData: number\n    BuildMetaDataPadded: string\n    FullBuildMetaData: string\n    MajorMinorPatch: string\n    SemVer: string\n    LegacySemVer: string\n    LegacySemVerPadded: string\n    AssemblySemVer: string\n    AssemblySemFileVer: string\n    FullSemVer: string\n    InformationalVersion: string\n    BranchName: string\n    EscapedBranchName: string\n    Sha: string\n    ShortSha: string\n    NuGetVersionV2: string\n    NuGetVersion: string\n    NuGetPreReleaseTagV2: string\n    NuGetPreReleaseTag: string\n    VersionSourceSha: string\n    CommitsSinceVersionSource: number\n    CommitsSinceVersionSourcePadded: string\n    UncommittedChanges: number\n    CommitDate: string\n}\n","import { ISettingsProvider, SettingsProvider } from '@tools/common'\nimport { ExecuteFields, type GitVersionSettings } from './models'\n\nexport interface IGitVersionSettingsProvider extends ISettingsProvider {\n    getGitVersionSettings(): GitVersionSettings\n}\n\nexport class GitVersionSettingsProvider extends SettingsProvider implements IGitVersionSettingsProvider {\n    getGitVersionSettings(): GitVersionSettings {\n        const targetPath = this.buildAgent.getInput(ExecuteFields.targetPath)\n\n        const disableCache = this.buildAgent.getBooleanInput(ExecuteFields.disableCache)\n        const disableNormalization = this.buildAgent.getBooleanInput(ExecuteFields.disableNormalization)\n        const disableShallowCloneCheck = this.buildAgent.getBooleanInput(ExecuteFields.disableShallowCloneCheck)\n\n        const useConfigFile = this.buildAgent.getBooleanInput(ExecuteFields.useConfigFile)\n        const configFilePath = this.buildAgent.getInput(ExecuteFields.configFilePath)\n        const overrideConfig = this.buildAgent.getListInput(ExecuteFields.overrideConfig)\n\n        const updateAssemblyInfo = this.buildAgent.getBooleanInput(ExecuteFields.updateAssemblyInfo)\n        const updateAssemblyInfoFilename = this.buildAgent.getInput(ExecuteFields.updateAssemblyInfoFilename)\n\n        const additionalArguments = this.buildAgent.getInput(ExecuteFields.additionalArguments)\n\n        return {\n            targetPath,\n            disableCache,\n            disableNormalization,\n            disableShallowCloneCheck,\n            useConfigFile,\n            configFilePath,\n            overrideConfig,\n            updateAssemblyInfo,\n            updateAssemblyInfoFilename,\n            additionalArguments\n        }\n    }\n}\n","import { type ExecResult } from '@agents/common'\nimport { DotnetTool, keysFn } from '@tools/common'\nimport { type GitVersionOutput, type GitVersionSettings } from './models'\nimport { GitVersionSettingsProvider, IGitVersionSettingsProvider } from './settings'\n\nexport class GitVersionTool extends DotnetTool {\n    get packageName(): string {\n        return 'GitVersion.Tool'\n    }\n\n    get toolName(): string {\n        return 'dotnet-gitversion'\n    }\n\n    get toolPathVariable(): string {\n        return 'GITVERSION_PATH'\n    }\n\n    get versionRange(): string | null {\n        return '>=5.2.0 <6.1.0'\n    }\n\n    get settingsProvider(): IGitVersionSettingsProvider {\n        return new GitVersionSettingsProvider(this.buildAgent)\n    }\n\n    async run(): Promise<ExecResult> {\n        const settings = this.settingsProvider.getGitVersionSettings()\n        const workDir = await this.getRepoDir(settings)\n\n        await this.checkShallowClone(settings, workDir)\n\n        const args = await this.getArguments(workDir, settings)\n\n        await this.setDotnetRoot()\n        return await this.executeTool(args)\n    }\n\n    writeGitVersionToAgent(output: GitVersionOutput): void {\n        const keys = keysFn<GitVersionOutput>(output)\n        for (const property of keys) {\n            const name = this.toCamelCase(property)\n            try {\n                let value = output[property]?.toString()\n                if (value === '0') {\n                    value = '0'\n                }\n                this.buildAgent.setOutput(name, value)\n                this.buildAgent.setOutput(`GitVersion_${property}`, value)\n                this.buildAgent.setVariable(name, value)\n                this.buildAgent.setVariable(`GitVersion_${property}`, value)\n            } catch (error) {\n                this.buildAgent.error(`Unable to set output/variable for ${property}`)\n            }\n        }\n    }\n\n    protected async getRepoDir(settings: GitVersionSettings): Promise<string> {\n        return await super.getRepoPath(settings.targetPath)\n    }\n\n    protected async getArguments(workDir: string, options: GitVersionSettings): Promise<string[]> {\n        let args = [workDir, '/output', 'json', '/output', 'buildserver']\n\n        const {\n            useConfigFile,\n            disableCache,\n            disableNormalization,\n            configFilePath,\n            overrideConfig,\n            updateAssemblyInfo,\n            updateAssemblyInfoFilename,\n            additionalArguments\n            //\n        } = options\n\n        if (disableCache) {\n            args.push('/nocache')\n        }\n\n        if (disableNormalization) {\n            args.push('/nonormalize')\n        }\n\n        if (useConfigFile) {\n            if (await this.isValidInputFile('configFilePath', configFilePath)) {\n                args.push('/config', configFilePath)\n            } else {\n                throw new Error(`GitVersion configuration file not found at ${configFilePath}`)\n            }\n        }\n\n        if (overrideConfig) {\n            for (let config of overrideConfig) {\n                config = config.trim()\n                if (config.match(/([a-zA-Z0-9]+(-[a-zA-Z]+)*=[a-zA-Z0-9\\- :.']*)/)) {\n                    args.push('/overrideconfig', config)\n                }\n            }\n        }\n\n        if (updateAssemblyInfo) {\n            args.push('/updateassemblyinfo')\n\n            // You can specify 'updateAssemblyInfo' without 'updateAssemblyInfoFilename'.\n            if (updateAssemblyInfoFilename?.length > 0) {\n                if (await this.isValidInputFile('updateAssemblyInfoFilename', updateAssemblyInfoFilename)) {\n                    args.push(updateAssemblyInfoFilename)\n                } else {\n                    throw new Error(`AssemblyInfoFilename file not found at ${updateAssemblyInfoFilename}`)\n                }\n            }\n        }\n\n        if (additionalArguments) {\n            args = args.concat(this.argStringToArray(additionalArguments))\n        }\n        return args\n    }\n\n    private argStringToArray(argString: string): string[] {\n        const args: string[] = []\n\n        let inQuotes = false\n        let escaped = false\n        let lastCharWasSpace = true\n        let arg = ''\n\n        const append = (c: string): void => {\n            // we only escape double quotes.\n            if (escaped && c !== '\"') {\n                arg += '\\\\'\n            }\n\n            arg += c\n            escaped = false\n        }\n\n        for (let i = 0; i < argString.length; i++) {\n            const c = argString.charAt(i)\n\n            if (c === ' ' && !inQuotes) {\n                if (!lastCharWasSpace) {\n                    args.push(arg)\n                    arg = ''\n                }\n                lastCharWasSpace = true\n                continue\n            } else {\n                lastCharWasSpace = false\n            }\n\n            if (c === '\"') {\n                if (!escaped) {\n                    inQuotes = !inQuotes\n                } else {\n                    append(c)\n                }\n                continue\n            }\n\n            if (c === '\\\\' && escaped) {\n                append(c)\n                continue\n            }\n\n            if (c === '\\\\' && inQuotes) {\n                escaped = true\n                continue\n            }\n\n            append(c)\n            lastCharWasSpace = false\n        }\n\n        if (!lastCharWasSpace) {\n            args.push(arg.trim())\n        }\n\n        return args\n    }\n\n    private async checkShallowClone(settings: GitVersionSettings, workDir: string): Promise<void> {\n        if (!settings.disableShallowCloneCheck) {\n            const isShallowResult = await this.execute('git', ['-C', workDir, 'rev-parse', '--is-shallow-repository'])\n            if (isShallowResult.code === 0 && isShallowResult.stdout.trim() === 'true') {\n                throw new Error(\n                    'The repository is shallow. Consider disabling shallow clones. See https://github.com/GitTools/actions/blob/main/docs/cloning.md for more information.'\n                )\n            }\n        }\n    }\n\n    private toCamelCase(input: string): string {\n        return input.replace(/^\\w|[A-Z]|\\b\\w|\\s+/g, function (match, index) {\n            if (+match === 0) return '' // or if (/\\s+/.test(match)) for white spaces\n            return index === 0 ? match.toLowerCase() : match.toUpperCase()\n        })\n    }\n}\n","import { IBuildAgent } from '@agents/common'\nimport { type Commands, type GitVersionOutput } from './models'\nimport { GitVersionTool } from './tool'\n\nexport class Runner {\n    private readonly gitVersionTool: GitVersionTool\n\n    constructor(private readonly buildAgent: IBuildAgent) {\n        this.gitVersionTool = new GitVersionTool(this.buildAgent)\n    }\n\n    async run(command: Commands): Promise<number> {\n        switch (command) {\n            case 'setup':\n                return await this.setup()\n            case 'execute':\n                return await this.execute()\n        }\n    }\n\n    private async setup(): Promise<number> {\n        try {\n            this.disableTelemetry()\n\n            this.buildAgent.debug('Installing GitVersion')\n            const toolPath = await this.gitVersionTool.install()\n\n            const pathVariable = this.gitVersionTool.toolPathVariable\n            this.buildAgent.info(`Set ${pathVariable} to ${toolPath}`)\n            this.buildAgent.setVariable(pathVariable, toolPath)\n\n            this.buildAgent.setSucceeded('GitVersion installed successfully', true)\n            return 0\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return -1\n        }\n    }\n\n    private async execute(): Promise<number> {\n        try {\n            this.disableTelemetry()\n\n            this.buildAgent.info('Executing GitVersion')\n\n            const result = await this.gitVersionTool.run()\n\n            if (result.code === 0) {\n                this.buildAgent.info('GitVersion executed successfully')\n                const { stdout } = result\n\n                this.buildAgent.info('GitVersion output:')\n                this.buildAgent.info('-------------------')\n                this.buildAgent.info(stdout)\n                this.buildAgent.info('-------------------')\n                this.buildAgent.debug('Parsing GitVersion output')\n\n                if (stdout.lastIndexOf('{') === -1 || stdout.lastIndexOf('}') === -1) {\n                    this.buildAgent.debug('GitVersion output is not valid JSON')\n                    this.buildAgent.setFailed('GitVersion output is not valid JSON', true)\n                    return -1\n                } else {\n                    const jsonOutput = stdout.substring(stdout.lastIndexOf('{'), stdout.lastIndexOf('}') + 1)\n\n                    const gitVersionOutput = JSON.parse(jsonOutput) as GitVersionOutput\n                    this.gitVersionTool.writeGitVersionToAgent(gitVersionOutput)\n                    this.buildAgent.setSucceeded('GitVersion executed successfully', true)\n                    return 0\n                }\n            } else {\n                this.buildAgent.debug('GitVersion failed')\n                const error = result.error\n                if (error instanceof Error) {\n                    this.buildAgent.setFailed(error.message, true)\n                }\n                return -1\n            }\n        } catch (error) {\n            if (error instanceof Error) {\n                this.buildAgent.setFailed(error.message, true)\n            }\n            return -1\n        }\n    }\n\n    private disableTelemetry(): void {\n        this.buildAgent.info(`Running on: '${this.buildAgent.agentName}'`)\n        this.buildAgent.debug('Disabling telemetry')\n        this.gitVersionTool.disableTelemetry()\n    }\n}\n","import { getAgent } from '@agents/common'\nimport { parseCliArgs } from '@tools/common'\nimport { type Commands, Runner } from '@tools/gitversion'\n\nconst { command, buildAgent } = parseCliArgs()\nconst agent = await getAgent(buildAgent)\nconst runner = new Runner(agent)\nawait runner.run(command as Commands)\n"],"names":["ExecuteFields"],"mappings":"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"}
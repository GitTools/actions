trigger:
  - main
  - 'fix/*'
  - 'feature/*'

pr:
  - main

variables:
  - group: gittools-actions
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: 'true'
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: 'true'
  - name: INPUT_VERSIONSPEC
    value: '6.1.x'
  - name: INPUT_INCLUDEPRERELEASE
    value: 'false'
  - name: INPUT_IGNOREFAILEDSOURCES
    value: 'true'
  - name: INPUT_PREFERLATESTVERSION
    value: 'false'

jobs:
- job: build
  displayName: ''
  strategy:
    matrix:
      'ubuntu-latest':
        imageName: 'ubuntu-latest'
      'macos-latest':
        imageName: 'macos-15'
      'windows-latest':
        imageName: 'windows-latest'

  pool:
    vmImage: $(imageName)

  steps:
    - checkout: self
      displayName: Checkout
      fetchDepth: '0'
    - pwsh: |
        npm install
      displayName: 'Install dependencies'
    - pwsh: |
        npm run lint:check && npm run format:check && npm run mdlint:check
      displayName: 'Check code formatting'
    - pwsh: |
        npm run build:tools
        npm run build:agent:github
        npm run build:agent:azure

        npx tfx extension create --root ./dist/azure --manifest-js ./dist/azure/manifest.config.cjs
        Expand-Archive -Path gittools.gittools-0.0.1.vsix -DestinationPath dist/vsix
      displayName: 'Build code'
    - pwsh: |
        npm run test:ci
      displayName: 'Run tests'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'junit-report.xml'
      displayName: 'Test Summary'
    - pwsh: |
        # set the inputs for the 'gitversion/setup' action
        $env:INPUT_VERSIONSPEC = "$(INPUT_VERSIONSPEC)"
        $env:INPUT_INCLUDEPRERELEASE = "$(INPUT_INCLUDEPRERELEASE)"
        $env:INPUT_IGNOREFAILEDSOURCES = "$(INPUT_IGNOREFAILEDSOURCES)"
        $env:INPUT_PREFERLATESTVERSION = "$(INPUT_PREFERLATESTVERSION)"

        # run the 'gitversion/setup' action
        node gitversion/setup/main.mjs
      displayName: gitversion/setup
      workingDirectory: dist/vsix
    - pwsh: |
        # set the inputs for the 'gitversion/command' action
        $env:INPUT_TARGETPATH = './'
        $env:INPUT_ARGUMENTS = '/showvariable FullSemVer'

        # run the 'gitversion/command' action
        node gitversion/command/main.mjs
      displayName: gitversion/command (showvariable)
      workingDirectory: dist/vsix
    - pwsh: |
        # set the inputs for the 'gitversion/command' action
        $env:INPUT_TARGETPATH = './'
        $env:INPUT_ARGUMENTS = '/format {Major}.{Minor}'

        # run the 'gitversion/command' action
        node gitversion/command/main.mjs
      displayName: gitversion/command (format)
      workingDirectory: dist/vsix
    - pwsh: |
        # set the inputs for the 'gitversion/execute' action
        $env:INPUT_TARGETPATH = './'
        $env:INPUT_DISABLECACHE = 'true'
        $env:INPUT_DISABLENORMALIZATION = 'false'
        $env:INPUT_OVERRIDECONFIG = '
          update-build-number=false'

        # run the 'gitversion/execute' action
        node gitversion/execute/main.mjs
      name: version
      displayName: gitversion/execute
      workingDirectory: dist/vsix
    - pwsh: |
        echo "Major      (major)                         : $(major)"
        echo "Major      (GitVersion_Major)              : $(GitVersion_Major)"
        echo "Major      (version.major)                 : $(version.major)"
        echo "Major      (version.GitVersion_Major)      : $(version.GitVersion_Major)"

        echo "Minor      (minor)                         : $(minor)"
        echo "Minor      (GitVersion_Minor)              : $(GitVersion_Minor)"
        echo "Minor      (version.minor)                 : $(version.minor)"
        echo "Minor      (version.GitVersion_Minor)      : $(version.GitVersion_Minor)"

        echo "Patch      (patch)                         : $(patch)"
        echo "Patch      (GitVersion_Patch)              : $(GitVersion_Patch)"
        echo "Patch      (version.patch)                 : $(version.patch)"
        echo "Patch      (version.GitVersion_Patch)      : $(version.GitVersion_Patch)"

        echo "FullSemVer (fullSemVer)                    : $(fullSemVer)"
        echo "FullSemVer (GitVersion_FullSemVer)         : $(GitVersion_FullSemVer)"
        echo "FullSemVer (version.fullSemVer)            : $(version.fullSemVer)"
        echo "FullSemVer (version.GitVersion_FullSemVer) : $(version.GitVersion_FullSemVer)"
      displayName: Use variables and output
